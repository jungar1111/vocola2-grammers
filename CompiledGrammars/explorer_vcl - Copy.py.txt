# Natlink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.6, Wed May 12 13:52:27 2021

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """

        <1> = 'new Explorer window' ;
        <folder> = ('Temp' | 'Downloads' | 'Start Menu' ) ;
        <2> = 'Go to' <folder> ;
        <3> = 'New Folder' ;
        <4> = 'Select address bar' ;
        <5> = 'Select search box' ;
        <6> = 'Select search box' ;
        <7> = 'New file explorer window' ;
        <21> = 'New file window' ;
        <20> = 'New explorer window' ;
        <22> = 'New window' ;
        <8> = 'Close window' ;
        <9> = 'Display preview panel' ;
        <10> = 'Show Properties' ;
        <11> = 'Close properties' ;
        <12> = 'goto end' ;
        <13> = 'goto top' ;
        <14> = 'Show List icons view' ;
        <23> = 'Show List view' ;
        <15> = 'Show Details icons view' ;
        <24> = 'Show Details view' ;
        <16> = 'Show Extra Large icons view' ;
        <25> = 'Show Extra Large icons' ;
        <17> = 'Show Large Icons view' ;
        <26> = 'Show Large Icons' ;
        <18> = 'Show Medium icons view' ;
        <27> = 'Show Medium icons' ;
        <19> = 'Show Small icons view' ;
        <28> = 'Show Small icons' ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<21>|<20>|<22>|<8>|<9>|<10>|<11>|<12>|<13>|<14>|<23>|<15>|<24>|<16>|<25>|<17>|<26>|<18>|<27>|<19>|<28>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.rule_state = {}

    
    def activate_rule(self, rule, window, status):
        current = self.rule_state.get(rule)
        active = (current == window)
        if status == active: return
        if current:
            self.deactivate(rule)
            self.rule_state[rule] = None
        if status:
            try:
                self.activate(rule, window)
                self.rule_state[rule] = window
            except natlink.BadWindow:
                pass


    def gotBegin(self,moduleInfo):
        self.firstWord = 0
        # Return if wrong application
        window = matchWindow(moduleInfo,'explorer','')
        if not window: return None
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        title = moduleInfo[1].lower()
        self.activate_rule('sequence', moduleInfo[2], True)

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        else:
            return word

    # 'new Explorer window'

    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_1(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 6, '\'new Explorer window\'', e)
            self.firstWord = -1

    def get_folder(self, list_buffer, functional, word):
        if word == 'Temp':
            list_buffer += 'C:\\Temp'
        elif word == 'Downloads':
            list_buffer += 'C:\\Programs\\Downloads'
        elif word == 'Start Menu':
            list_buffer += 'C:\\Documents and Settings\\junga\\Start Menu'
        return list_buffer

    # 'Go to' <folder>

    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+d}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_folder(top_buffer, False, word)
            top_buffer += '{Enter}{Tab_2}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Alt+NumKey+}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('explorer.vcl', 24, '\'Go to\' <folder>', e)
            self.firstWord = -1

    # 'New Folder'

    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+h}n'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 25, '\'New Folder\'', e)
            self.firstWord = -1

    # 'Select address bar'

    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 48, '\'Select address bar\'', e)
            self.firstWord = -1

    # 'Select search box'

    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+e}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_5(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 49, '\'Select search box\'', e)
            self.firstWord = -1

    # 'Select search box'

    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+f}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_6(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 50, '\'Select search box\'', e)
            self.firstWord = -1

    # 'New file explorer window'

    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_7(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 51, '\'New file explorer window\'', e)
            self.firstWord = -1

    # 'New file window'

    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_21(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 51, '\'New file window\'', e)
            self.firstWord = -1

    # 'New explorer window'

    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 51, '\'New explorer window\'', e)
            self.firstWord = -1

    # 'New window'

    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_22(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 51, '\'New window\'', e)
            self.firstWord = -1

    # 'Close window'

    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'w}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_8(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 52, '\'Close window\'', e)
            self.firstWord = -1

    # 'Display preview panel'

    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{alt+p}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 55, '\'Display preview panel\'', e)
            self.firstWord = -1

    # 'Show Properties'

    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{alt+enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_10(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 56, '\'Show Properties\'', e)
            self.firstWord = -1

    # 'Close properties'

    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_11(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 57, '\'Close properties\'', e)
            self.firstWord = -1

    # 'goto end'

    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{end}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_12(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 66, '\'goto end\'', e)
            self.firstWord = -1

    # 'goto top'

    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_13(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 67, '\'goto top\'', e)
            self.firstWord = -1

    # 'Show List icons view'

    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+5}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_14(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 70, '\'Show List icons view\'', e)
            self.firstWord = -1

    # 'Show List view'

    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+5}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_23(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 70, '\'Show List view\'', e)
            self.firstWord = -1

    # 'Show Details icons view'

    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+6}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_15(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 71, '\'Show Details icons view\'', e)
            self.firstWord = -1

    # 'Show Details view'

    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+6}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_24(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 71, '\'Show Details view\'', e)
            self.firstWord = -1

    # 'Show Extra Large icons view'

    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+1}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_16(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 72, '\'Show Extra Large icons view\'', e)
            self.firstWord = -1

    # 'Show Extra Large icons'

    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+1}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_25(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 72, '\'Show Extra Large icons\'', e)
            self.firstWord = -1

    # 'Show Large Icons view'

    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_17(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 73, '\'Show Large Icons view\'', e)
            self.firstWord = -1

    # 'Show Large Icons'

    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_26(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 73, '\'Show Large Icons\'', e)
            self.firstWord = -1

    # 'Show Medium icons view'

    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_18(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 74, '\'Show Medium icons view\'', e)
            self.firstWord = -1

    # 'Show Medium icons'

    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_27(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 74, '\'Show Medium icons\'', e)
            self.firstWord = -1

    # 'Show Small icons view'

    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_19(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 75, '\'Show Small icons view\'', e)
            self.firstWord = -1

    # 'Show Small icons'

    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception as e:
            handle_error('explorer.vcl', 75, '\'Show Small icons\'', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None

