# Natlink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.6, Wed May 12 13:52:27 2021

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """

        <dgndictation> imported;
        <1> = 'Show' ('google' | 'yahoo' | 'ScanSoft' ) ;
        <url> = ('Vocola' | 'Amazon' | 'Weather Map' | 'google Maps' | 'Kayak' | 'jungarnet' | 'jungarnet' | 'jungarnet' | 'jungar net' | 'junk net' | 'work email' | 'Yahoo email' | 'Yahoo mail' | 'jungar email' | 'junk email' | 'monger email' | '1 and 1' | 'partners healthcare' | 'patient Gateway' | 'Beth Israel Deaconess' | 'BIDMC' | 'Audible' | 'github' | 'Cisco' | 'Google maps' | 'last pass' | 'fidelity' | 'TD ameritrade' | 'Amazon' | 'Google' ) ;
        <2> = 'open' <url> ;
        <3> = 'open HTTP' <url> ;
        <4> = 'open HTTPS' <url> ;
        <5> = 'open secure' <url> ;
        <6> = 'open f t p' <url> ;
        <7> = 'test firefox' ;
        <8> = 'Search bar' ;
        <9> = 'Address Bar' ;
        <10> = 'Web Search For' <dgndictation> ;
        <39> = 'Search For' <dgndictation> ;
        <11> = 'New Window' ;
        <12> = 'new private window' ;
        <showfirefox> = ('add-ons' | 'web console' | 'developer tools' | 'inspector' | 'style editor' | 'bookmarks' | 'downloads' ) ;
        <13> = 'show' <showfirefox> ;
        <hidefirefox> = ('add-ons' | 'web console' | 'developer tools' | 'inspector' | 'style editor' | 'bookmarks' | 'downloads' ) ;
        <14> = 'hide' <hidefirefox> ;
        <15> = 'clear recent history' ;
        <16> = 'New Tab' ;
        <17> = 'Close' ('Tab' | 'That' ) ;
        <18> = 'Next Tab' ;
        <19> = 'Previous Tab' ;
        <20> = 'Move Tab Right' ;
        <21> = 'Move Tab Left' ;
        <22> = ('show' | 'hide' ) 'history' ;
        <23> = 'bookmark this tab' ;
        <24> = ('Mute' | 'unmute' ) ('that' | 'audio' ) ;
        <25> = 'restore window' ;
        <26> = 'Go Back' ;
        <27> = 'Go Forward' ;
        <28> = 'show Home page' ;
        <29> = 'Open File' ;
        <30> = 'Reload' ;
        <31> = 'Reload' ('override cache' ) ;
        <32> = 'Page Down' ;
        <33> = 'Page Up' ;
        <34> = 'Go to end' ('of Page' ) ;
        <35> = 'Go to beginning' ('of Page' ) ;
        <36> = 'find again' ;
        <37> = 'find previous' ;
        <38> = 'Toggle full screen' ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<8>|<9>|<10>|<39>|<11>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<30>|<31>|<32>|<33>|<34>|<35>|<36>|<37>|<38>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.rule_state = {}

    
    def activate_rule(self, rule, window, status):
        current = self.rule_state.get(rule)
        active = (current == window)
        if status == active: return
        if current:
            self.deactivate(rule)
            self.rule_state[rule] = None
        if status:
            try:
                self.activate(rule, window)
                self.rule_state[rule] = window
            except natlink.BadWindow:
                pass


    def gotBegin(self,moduleInfo):
        self.firstWord = 0
        # Return if wrong application
        window = matchWindow(moduleInfo,'firefox','')
        if not window: return None
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        title = moduleInfo[1].lower()
        self.activate_rule('sequence', moduleInfo[2], True)

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        else:
            return word

    # 'Show' ('google' | 'yahoo' | 'ScanSoft')

    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+d}http://'
            word = fullResults[1 + self.firstWord][0]
            if word == 'google':
                top_buffer += 'www.google.com'
            elif word == 'yahoo':
                top_buffer += 'www.yahoo.com'
            elif word == 'ScanSoft':
                top_buffer += 'www.scansoft.com/naturallyspeaking'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_1(words[2:], fullResults)
        except Exception as e:
            handle_error('URLs.vch', 8, '\'Show\' (\'google\' | \'yahoo\' | \'ScanSoft\')', e)
            self.firstWord = -1

    def get_url(self, list_buffer, functional, word):
        if word == 'Vocola':
            list_buffer += 'vocola.net'
        elif word == 'Amazon':
            list_buffer += 'www.Amazon.com'
        elif word == 'Weather Map':
            list_buffer += 'www.wunderground.com/US/Region/US/2xFronts.html'
        elif word == 'google Maps':
            list_buffer += 'maps.google.com'
        elif word == 'Kayak':
            list_buffer += 'www.kayak.com'
        elif word == 'jungarnet':
            list_buffer += 'jungar.net'
        elif word == 'jungarnet':
            list_buffer += 'jungar.net'
        elif word == 'jungarnet':
            list_buffer += 'jungar.net'
        elif word == 'jungar net':
            list_buffer += 'jungar.net'
        elif word == 'junk net':
            list_buffer += 'jungar.net'
        elif word == 'work email':
            list_buffer += 'outlook.office.com'
        elif word == 'Yahoo email':
            list_buffer += 'mail.yahoo.com'
        elif word == 'Yahoo mail':
            list_buffer += 'mail.yahoo.com'
        elif word == 'jungar email':
            list_buffer += 'webmail.1and1.com'
        elif word == 'junk email':
            list_buffer += 'webmail.1and1.com'
        elif word == 'monger email':
            list_buffer += 'mail.monger.net'
        elif word == '1 and 1':
            list_buffer += '1and1.com'
        elif word == 'partners healthcare':
            list_buffer += 'www.partners.org'
        elif word == 'patient Gateway':
            list_buffer += 'mychart.partners.org'
        elif word == 'Beth Israel Deaconess':
            list_buffer += 'bidmc.org'
        elif word == 'BIDMC':
            list_buffer += 'bidmc.org'
        elif word == 'Audible':
            list_buffer += 'audible.com'
        elif word == 'github':
            list_buffer += 'github.com'
        elif word == 'Cisco':
            list_buffer += 'cisco.com'
        elif word == 'Google maps':
            list_buffer += 'maps.google.com'
        elif word == 'last pass':
            list_buffer += 'lastpass.com'
        elif word == 'fidelity':
            list_buffer += 'fidelity.com'
        elif word == 'TD ameritrade':
            list_buffer += 'tdameritrade.com'
        elif word == 'Amazon':
            list_buffer += 'amazon.com'
        elif word == 'Google':
            list_buffer += 'google.com'
        return list_buffer

    # 'open' <url>

    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+l}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Ctrl+a}'
            top_buffer += 'http://'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_url(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('URLs.vch', 42, '\'open\' <url>', e)
            self.firstWord = -1

    # 'open HTTP' <url>

    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+l}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Ctrl+a}'
            top_buffer += 'http://'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_url(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('URLs.vch', 43, '\'open HTTP\' <url>', e)
            self.firstWord = -1

    # 'open HTTPS' <url>

    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+l}'
            top_buffer += 'https://'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_url(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('URLs.vch', 44, '\'open HTTPS\' <url>', e)
            self.firstWord = -1

    # 'open secure' <url>

    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+l}'
            top_buffer += 'https://'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_url(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('URLs.vch', 45, '\'open secure\' <url>', e)
            self.firstWord = -1

    # 'open f t p' <url>

    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+l}'
            top_buffer += 'ftp://'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_url(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('URLs.vch', 46, '\'open f t p\' <url>', e)
            self.firstWord = -1

    # 'test firefox'

    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'in firefox'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_7(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 4, '\'test firefox\'', e)
            self.firstWord = -1

    # 'Search bar'

    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+k}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_8(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 6, '\'Search bar\'', e)
            self.firstWord = -1

    # 'Address Bar'

    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+l}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 7, '\'Address Bar\'', e)
            self.firstWord = -1

    # 'Web Search For' <_anything>

    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+k}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('firefox.vcl', 8, '\'Web Search For\' <_anything>', e)
            self.firstWord = -1

    # 'Search For' <_anything>

    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+k}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('firefox.vcl', 8, '\'Search For\' <_anything>', e)
            self.firstWord = -1

    # 'New Window'

    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_11(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 10, '\'New Window\'', e)
            self.firstWord = -1

    # 'new private window'

    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+P}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_12(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 11, '\'new private window\'', e)
            self.firstWord = -1

    def get_showfirefox(self, list_buffer, functional, word):
        if word == 'add-ons':
            list_buffer += '{Ctrl+Shift+A}'
        elif word == 'web console':
            list_buffer += '{Ctrl+Shift+K}'
        elif word == 'developer tools':
            list_buffer += '{Ctrl+Shift+I}'
        elif word == 'inspector':
            list_buffer += '{Ctrl+Shift+C}'
        elif word == 'style editor':
            list_buffer += '{Shift+F7}'
        elif word == 'bookmarks':
            list_buffer += '{Ctrl+b}'
        elif word == 'downloads':
            list_buffer += '{Ctrl+j}'
        return list_buffer

    # 'show' <showfirefox>

    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_showfirefox(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('firefox.vcl', 27, '\'show\' <showfirefox>', e)
            self.firstWord = -1

    def get_hidefirefox(self, list_buffer, functional, word):
        if word == 'add-ons':
            list_buffer += '{Ctrl+Shift+A}'
        elif word == 'web console':
            list_buffer += '{Ctrl+Shift+K}'
        elif word == 'developer tools':
            list_buffer += '{Ctrl+Shift+I}'
        elif word == 'inspector':
            list_buffer += '{Ctrl+Shift+C}'
        elif word == 'style editor':
            list_buffer += '{Shift+F7}'
        elif word == 'bookmarks':
            list_buffer += '{Ctrl+b}'
        elif word == 'downloads':
            list_buffer += '{Ctrl+w}'
        return list_buffer

    # 'hide' <hidefirefox>

    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_hidefirefox(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('firefox.vcl', 40, '\'hide\' <hidefirefox>', e)
            self.firstWord = -1

    # 'clear recent history'

    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_15(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 41, '\'clear recent history\'', e)
            self.firstWord = -1

    # 'New Tab'

    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+t}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_16(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 44, '\'New Tab\'', e)
            self.firstWord = -1

    # 'Close' ('Tab' | 'That')

    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_17(words[2:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 45, '\'Close\' (\'Tab\' | \'That\')', e)
            self.firstWord = -1

    # 'Next Tab'

    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+PgDn}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_18(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 46, '\'Next Tab\'', e)
            self.firstWord = -1

    # 'Previous Tab'

    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+PgUp}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_19(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 47, '\'Previous Tab\'', e)
            self.firstWord = -1

    # 'Move Tab Right'

    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+PgDn}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 48, '\'Move Tab Right\'', e)
            self.firstWord = -1

    # 'Move Tab Left'

    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+PgUp}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_21(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 49, '\'Move Tab Left\'', e)
            self.firstWord = -1

    # ('show' | 'hide') 'history'

    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+h}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_22(words[2:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 52, '(\'show\' | \'hide\') \'history\'', e)
            self.firstWord = -1

    # 'bookmark this tab'

    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_23(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 55, '\'bookmark this tab\'', e)
            self.firstWord = -1

    # ('Mute' | 'unmute') ('that' | 'audio')

    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+m}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_24(words[2:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 57, '(\'Mute\' | \'unmute\') (\'that\' | \'audio\')', e)
            self.firstWord = -1

    # 'restore window'

    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+s}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Down}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Down}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Down}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Right}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_25(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 59, '\'restore window\'', e)
            self.firstWord = -1

    # 'Go Back'

    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_26(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 63, '\'Go Back\'', e)
            self.firstWord = -1

    # 'Go Forward'

    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_27(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 64, '\'Go Forward\'', e)
            self.firstWord = -1

    # 'show Home page'

    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 65, '\'show Home page\'', e)
            self.firstWord = -1

    # 'Open File'

    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+o}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_29(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 66, '\'Open File\'', e)
            self.firstWord = -1

    # 'Reload'

    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F5}'
            top_buffer += '{Ctrl+R}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_30(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 67, '\'Reload\'', e)
            self.firstWord = -1

    # 'Reload' ('override cache')

    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+F5}'
            top_buffer += '{Ctrl+Shift+R}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_31(words[2:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 68, '\'Reload\' (\'override cache\')', e)
            self.firstWord = -1

    # 'Page Down'

    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{PgDn}'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_32(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 70, '\'Page Down\'', e)
            self.firstWord = -1

    # 'Page Up'

    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{PgUp}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_33(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 71, '\'Page Up\'', e)
            self.firstWord = -1

    # 'Go to end' ('of Page')

    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{End}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_34(words[2:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 72, '\'Go to end\' (\'of Page\')', e)
            self.firstWord = -1

    # 'Go to beginning' ('of Page')

    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_35(words[2:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 73, '\'Go to beginning\' (\'of Page\')', e)
            self.firstWord = -1

    # 'find again'

    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_36(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 77, '\'find again\'', e)
            self.firstWord = -1

    # 'find previous'

    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+g}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_37(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 78, '\'find previous\'', e)
            self.firstWord = -1

    # 'Toggle full screen'

    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F11}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_38(words[1:], fullResults)
        except Exception as e:
            handle_error('firefox.vcl', 80, '\'Toggle full screen\'', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None

