# Natlink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.6, Sat Dec 18 15:15:35 2021

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """

        <dgndictation> imported;
        <1> = 'two' ;
        <2> = 'to' ;
        <3> = 'three' ;
        <4> = 'four' ;
        <5> = 'five' ;
        <6> = 'six' ;
        <7> = 'seven' ;
        <8> = 'eight' ;
        <9> = 'nine' ;
        <key> = ('alpha' | 'bravo' | 'charlie' | 'delta' | 'echo' | 'foxtrot' | 'golf' | 'hotel' | 'india' | 'juliett' | 'kilo' | 'lima' | 'mike' | 'november' | 'oscar' | 'papa' | 'quebec' | 'romeo' | 'sierra' | 'tango' | 'uniform' | 'victor' | 'whiskey' | 'xray' | 'yankee' | 'zulu' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '!' | '@' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '`' | '~' | '-' | '_' | '=' | '+' | '\\' | '|' | '[' | '{' | ']' | '}' | ';' | ':' | "'" | '"' | ',' | '<' | '.' | '>' | '/' | '?' | 'Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'Escape' | 'Home' | 'End' ) ;
        <letterKey> = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' ;
        <militaryKey> = ('Alpha' | 'Bravo' | 'Charlie' | 'Delta' | 'Echo' | 'Foxtrot' | 'Golf' | 'Hotel' | 'India' | 'Juliet' | 'Kilo' | 'Lima' | 'Mike' | 'November' | 'Oscar' | 'Papa' | 'Quebec' | 'Romeo' | 'Sierra' | 'Tango' | 'Uniform' | 'Victor' | 'Whiskey' | 'Xray' | 'Yankee' | 'Zulu' ) ;
        <numberKey> = ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <functionKey> = 'F1' | 'F2' | 'F3' | 'F4' | 'F5' | 'F6' | 'F7' | 'F8' | 'F9' | 'F10' | 'F11' | 'F12' ;
        <unicodeKey> = 'Copyright' | 'Em Dash' ;
        <10> = 'Press' <key> ;
        <11> = 'Space Bar' ;
        <special> = ('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' | 'Home' | 'End' ) ;
        <mod> = 'Shift' | 'control' | 'Alt' | 'Win' ;
        <ndigit> = ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <12> = 'Press' <special> ;
        <13> = 'Press' <special> <ndigit> ;
        <14> = 'Press' <mod> <key> ;
        <15> = 'Press' <mod> <key> <ndigit> ;
        <16> = 'Press' <mod> <mod> <key> <ndigit> ;
        <17> = 'Press' <mod> <mod> <mod> <key> <ndigit> ;
        <capMilitaryKey> = ('Cap Alpha' | 'Cap Bravo' | 'Cap Charlie' | 'Cap Delta' | 'Cap Echo' | 'Cap Golf' | 'Cap Hotel' | 'Cap India' | 'Cap Juliet' | 'Cap Kilo' | 'Cap Mike' | 'Cap November' | 'Cap Oscar' | 'Cap Papa' | 'Cap Quebec' | 'Cap Sierra' | 'Cap Tango' | 'Cap Uniform' | 'Cap Victor' | 'Cap Whiskey' | 'Cap Xray' | 'Cap Yankee' | 'Cap Zulu' ) ;
        <symbolKey> = ('~' | '!' | '@' | '#' | '$' | '%' | '^' | '*' | '(' | ')' | '_' | '+' | '`' | '-' | '=' | '{' | '}' | '|' | '[' | ']' | '\\' | ':' | '"' | ';' | "'" | '<' | '>' | '?' | ',' | '.' | '/' ) ;
        <18> = 'test box' ;
        <19> = 'test voice' ;
        <20> = 'save file' ;
        <21> = 'safe file' ;
        <22> = 'new file' ;
        <23> = 'open file' ;
        <24> = 'close file' ;
        <25> = 'select all' ;
        <26> = 'undo that' ;
        <27> = 'copy that' ;
        <28> = 'paste that' ;
        <29> = 'cut that' ;
        <30> = 'print that' ;
        <31> = 'insert text' <dgndictation> ;
        <32> = 'find' <dgndictation> ;
        <33> = 'Vocola line' ;
        <direction> = '{ Left' | 'Right' | 'Up' | 'Down }' ;
        <up_down> = '{ Back' | 'Forward' | 'Up' | 'Down }' ;
        <left_right> = '{ Left' | 'Right }' ;
        <start_end> = '{ Beginning' | 'Start' | 'End' ;
        <to_start_end> = '{ Beginning' | 'Start' | 'End' ;
        <34> = 'crazy 1 up' ;
        <35> = 'crazy 1 down' ;
        <36> = 'crazy 1 right' ;
        <37> = 'crazy 1 left' ;
        <38> = ('Grab' ) 'one letter left' ;
        <39> = ('Grab' ) 'one letter right' ;
        <40> = ('Grab' ) 'one word left' ;
        <41> = ('Grab' ) 'one word right' ;
        <42> = ('Grab' ) ('two' | '2' ) 'Words right' ;
        <43> = ('Grab' ) ('three' | '3' ) 'Words right' ;
        <44> = ('Grab' ) ('four' | '4' ) 'Words right' ;
        <45> = ('Grab' ) 'forwards right' ;
        <46> = ('Grab' ) ('five' | '5' ) 'Words right' ;
        <47> = ('Grab' ) ('six' | '6' ) 'Words right' ;
        <48> = ('Grab' ) ('seven' | '7' ) 'Words right' ;
        <49> = ('Grab' ) ('eight' | '8' ) 'Words right' ;
        <50> = ('Grab' ) ('nine' | '9' ) 'Words right' ;
        <51> = ('Grab' ) ('two' | '2' ) 'Words left' ;
        <52> = ('Grab' ) ('three' | '3' ) 'Words left' ;
        <53> = ('Grab' ) ('four' | '4' ) 'Words left' ;
        <54> = ('Grab' ) 'forwards left' ;
        <55> = ('Grab' ) ('five' | '5' ) 'Words left' ;
        <56> = ('Grab' ) ('six' | '6' ) 'Words left' ;
        <57> = ('Grab' ) ('seven' | '7' ) 'Words left' ;
        <58> = ('Grab' ) ('eight' | '8' ) 'Words left' ;
        <59> = ('Grab' ) ('nine' | '9' ) 'Words left' ;
        <60> = 'grab one line down' ;
        <61> = 'grab' ('two' | '2' ) 'lines down' ;
        <62> = 'grab' ('three' | '3' ) 'lines down' ;
        <63> = 'grab' ('four' | '4' ) 'lines down' ;
        <64> = 'grab' ('five' | '5' ) 'lines down' ;
        <65> = 'grab' ('six' | '6' ) 'lines down' ;
        <66> = 'grab' ('seven' | '7' ) 'lines down' ;
        <67> = 'grab' ('eight' | '8' ) 'lines down' ;
        <68> = 'grab' ('nine' | '9' ) 'lines down' ;
        <69> = 'grab one line up' ;
        <70> = 'grab' ('two' | '2' ) 'lines up' ;
        <71> = 'grab' ('three' | '3' ) 'lines up' ;
        <72> = 'grab' ('four' | '4' ) 'lines up' ;
        <73> = 'grab' ('five' | '5' ) 'lines up' ;
        <74> = 'grab' ('six' | '6' ) 'lines up' ;
        <75> = 'grab' ('seven' | '7' ) 'lines up' ;
        <76> = 'grab' ('eight' | '8' ) 'lines up' ;
        <77> = 'grab' ('nine' | '9' ) 'lines up' ;
        <78> = 'line start' ;
        <79> = 'line end' ;
        <80> = 'Delete line delete' ;
        <81> = 'Flow Start' ;
        <82> = 'Flow End' ;
        <83> = 'Grab to flow start' ;
        <84> = 'Grab to flow end' ;
        <85> = 'camel' <dgndictation> ;
        <86> = 'camelcase' <dgndictation> ;
        <87> = 'Pascal' <dgndictation> ;
        <88> = 'Title' <dgndictation> ;
        <89> = 'Cap Smush' <dgndictation> ;
        <90> = 'score' <dgndictation> ;
        <91> = 'underscore' <dgndictation> ;
        <92> = 'underscore cap' <dgndictation> ;
        <93> = 'hype' <dgndictation> ;
        <94> = 'terse' <dgndictation> ;
        <95> = 'smush' <dgndictation> ;
        <96> = 'lower case' <dgndictation> ;
        <97> = 'lower case smush' <dgndictation> ;
        <98> = 'upper case' <dgndictation> ;
        <99> = 'upper case smush' <dgndictation> ;
        <100> = 'left square bracket' ;
        <101> = 'write square bracket' ;
        <102> = 'left curly cube bracket' ;
        <103> = 'curlicues bracket' ;
        <104> = 'curlicues right bracket' ;
        <105> = 'curlicues left bracket' ;
        <106> = 'write curly queue bracket' ;
        <107> = 'write paren' ;
        <108> = 'left paren' ;
        <109> = 'left and right parens' ;
        <110> = 'left and right paren' ;
        <111> = 'leptin right paren' ;
        <112> = 'left and)' ;
        <DaProgramName> = ('firefox' | 'firefox 32' | 'firefox 64' | 'firefox work' | 'Adam' | 'atom' | 'Microsoft Word' | 'Microsoft Excel' | 'Word 2016' | 'Excel 2016' | 'Word work' | 'Excel work' | 'Outlook 2016' | 'Jeannie' | 'iTunes' | 'kay diff 3' | 'file zilla' | 'AnyConnect client' | 'AnyConnect' | 'Cisco AnyConnect' | 'notepad' | 'notepad plus plus' | 'Command Prompt' | 'CMD' | 'Explorer' | 'file Explorer' | 'CLI' | 'command line' | 'Chrome' | 'Atom' ) ;
        <113> = 'run' <DaProgramName> ;
        <114> = 'open Environment Variables' ;
        <115> = 'Manage Computer' ;
        <116> = 'Add Remove Programs' ;
        <225> = 'Remove Programs' ;
        <117> = 'pipe' ;
        <118> = 'single quote' ;
        <119> = 'double quote' ;
        <120> = 'wifi' ;
        <121> = 'wifi' ;
        <122> = 'H 323' ;
        <123> = 'H dot 323' ;
        <124> = 'Q 931' ;
        <125> = 'Q 921' ;
        <126> = 'wap' ;
        <127> = 'waps' ;
        <128> = 'W P A V 2' ;
        <129> = 'WPA V2' ;
        <130> = 'WPA V to' ;
        <131> = 'The LAN' ;
        <132> = 'V LAN' ;
        <133> = 'sert' ;
        <134> = 'tour on toe' ;
        <135> = 'ver I zon' ;
        <136> = 'com cast' ;
        <137> = 'ping' ;
        <138> = 'back to RE' ;
        <139> = 'C U C M' ;
        <140> = 'UCCX' ;
        <141> = 'UC CX' ;
        <142> = 'UC' ;
        <143> = 'Flex connect' ;
        <144> = 'net flow' ;
        <145> = 'dot HTM' ;
        <146> = 'dot HTML' ;
        <147> = 'dot net' ;
        <148> = 'dot com' ;
        <149> = '. PHP' ;
        <150> = '. CFG' ;
        <151> = '.CFG' ;
        <152> = '. doc' ;
        <153> = '. doc x' ;
        <154> = '. xls' ;
        <155> = '. xls x' ;
        <156> = '. VHV' ;
        <157> = '. VHP' ;
        <158> = '. Com' ;
        <159> = '. com' ;
        <160> = '. Edu' ;
        <161> = '. gov' ;
        <162> = '. TXT' ;
        <163> = 'padded equals' ;
        <164> = 'padded equal sign' ;
        <165> = 'padded =' ;
        <166> = 'padded =' ;
        <167> = 'padded dash' ;
        <168> = 'padded hyphen' ;
        <169> = 'padded pipe' ;
        <170> = 'T FTP' ;
        <171> = 'VPN v 4' ;
        <172> = 'VPN before' ;
        <173> = 'mpls' ;
        <174> = 'I G P' ;
        <175> = 'B G P' ;
        <176> = 'B G P v 4' ;
        <177> = 'B G P before' ;
        <178> = 'B G P fore' ;
        <179> = 'BGP before' ;
        <180> = 'O S P F' ;
        <181> = 'E I G R P' ;
        <182> = 'EI GRP' ;
        <183> = 'N R P E' ;
        <184> = 'an RPE' ;
        <185> = 'A ray' ;
        <186> = 'are right' ;
        <187> = 'i phone' ;
        <188> = 'sip' ;
        <189> = 'admin' ;
        <190> = 'Log stash' ;
        <191> = 'oo boon 2' ;
        <192> = 'cabana' ;
        <193> = 'ki bah nah' ;
        <194> = 'chip on a' ;
        <195> = 'tip on a' ;
        <196> = 'con fig' ;
        <197> = 'sis log' ;
        <198> = 'ver eye zon' ;
        <199> = 'net mask' ;
        <200> = 'root' ;
        <201> = 'rowt' ;
        <202> = 'bang' ;
        <203> = 'Gigabit per second' ;
        <204> = 'QOS' ;
        <205> = 'SAV' ;
        <206> = 'like the one' ;
        <207> = 'IKEv1 IQ to IKE v 1' ;
        <208> = 'IQ one' ;
        <209> = 'IKEv2' ;
        <210> = 'IQ to' ;
        <211> = 'Ike be to' ;
        <212> = 'vocola two' ;
        <213> = 'vo cola to' ;
        <214> = 'vocola to' ;
        <215> = 'vocola two' ;
        <216> = 'vocola 2' ;
        <217> = 'vo cola 2' ;
        <218> = 'forward slash twenty 4' ;
        <219> = 'code or' ;
        <220> = 'voice code or' ;
        <221> = 'I C M P' ;
        <222> = 'I CMP' ;
        <223> = 'G711' ;
        <224> = 'space' ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<8>|<9>|<10>|<11>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<30>|<31>|<32>|<33>|<34>|<35>|<36>|<37>|<38>|<39>|<40>|<41>|<42>|<43>|<44>|<45>|<46>|<47>|<48>|<49>|<50>|<51>|<52>|<53>|<54>|<55>|<56>|<57>|<58>|<59>|<60>|<61>|<62>|<63>|<64>|<65>|<66>|<67>|<68>|<69>|<70>|<71>|<72>|<73>|<74>|<75>|<76>|<77>|<78>|<79>|<80>|<81>|<82>|<83>|<84>|<85>|<86>|<87>|<88>|<89>|<90>|<91>|<92>|<93>|<94>|<95>|<96>|<97>|<98>|<99>|<100>|<101>|<102>|<103>|<104>|<105>|<106>|<107>|<108>|<109>|<110>|<111>|<112>|<113>|<114>|<115>|<116>|<225>|<117>|<118>|<119>|<120>|<121>|<122>|<123>|<124>|<125>|<126>|<127>|<128>|<129>|<130>|<131>|<132>|<133>|<134>|<135>|<136>|<137>|<138>|<139>|<140>|<141>|<142>|<143>|<144>|<145>|<146>|<147>|<148>|<149>|<150>|<151>|<152>|<153>|<154>|<155>|<156>|<157>|<158>|<159>|<160>|<161>|<162>|<163>|<164>|<165>|<166>|<167>|<168>|<169>|<170>|<171>|<172>|<173>|<174>|<175>|<176>|<177>|<178>|<179>|<180>|<181>|<182>|<183>|<184>|<185>|<186>|<187>|<188>|<189>|<190>|<191>|<192>|<193>|<194>|<195>|<196>|<197>|<198>|<199>|<200>|<201>|<202>|<203>|<204>|<205>|<206>|<207>|<208>|<209>|<210>|<211>|<212>|<213>|<214>|<215>|<216>|<217>|<218>|<219>|<220>|<221>|<222>|<223>|<224>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.rule_state = {}

        self.activate('sequence')
    
    def activate_rule(self, rule, window, status):
        current = self.rule_state.get(rule)
        active = (current == window)
        if status == active: return
        if current:
            self.deactivate(rule)
            self.rule_state[rule] = None
        if status:
            try:
                self.activate(rule, window)
                self.rule_state[rule] = window
            except natlink.BadWindow:
                pass


    def gotBegin(self,moduleInfo):
        self.firstWord = 0
        window = moduleInfo[2]
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        title = moduleInfo[1].lower()

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        else:
            return word

    # 'two'

    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_1(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 2, '\'two\'', e)
            self.firstWord = -1

    # 'to'

    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_2(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 3, '\'to\'', e)
            self.firstWord = -1

    # 'three'

    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '3'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 4, '\'three\'', e)
            self.firstWord = -1

    # 'four'

    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '4'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 5, '\'four\'', e)
            self.firstWord = -1

    # 'five'

    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '5'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_5(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 6, '\'five\'', e)
            self.firstWord = -1

    # 'six'

    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '6'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_6(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 7, '\'six\'', e)
            self.firstWord = -1

    # 'seven'

    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '7'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_7(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 8, '\'seven\'', e)
            self.firstWord = -1

    # 'eight'

    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '8'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_8(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 9, '\'eight\'', e)
            self.firstWord = -1

    # 'nine'

    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '9'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 10, '\'nine\'', e)
            self.firstWord = -1

    def get_key(self, list_buffer, functional, word):
        if word == 'alpha':
            list_buffer += 'a'
        elif word == 'bravo':
            list_buffer += 'b'
        elif word == 'charlie':
            list_buffer += 'c'
        elif word == 'delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'hotel':
            list_buffer += 'h'
        elif word == 'india':
            list_buffer += 'i'
        elif word == 'juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'lima':
            list_buffer += 'l'
        elif word == 'mike':
            list_buffer += 'm'
        elif word == 'november':
            list_buffer += 'n'
        elif word == 'oscar':
            list_buffer += 'o'
        elif word == 'papa':
            list_buffer += 'p'
        elif word == 'quebec':
            list_buffer += 'q'
        elif word == 'romeo':
            list_buffer += 'r'
        elif word == 'sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'xray':
            list_buffer += 'x'
        elif word == 'yankee':
            list_buffer += 'y'
        elif word == 'zulu':
            list_buffer += 'z'
        elif word == '0':
            list_buffer += '0'
        elif word == '1':
            list_buffer += '1'
        elif word == '2':
            list_buffer += '2'
        elif word == '3':
            list_buffer += '3'
        elif word == '4':
            list_buffer += '4'
        elif word == '5':
            list_buffer += '5'
        elif word == '6':
            list_buffer += '6'
        elif word == '7':
            list_buffer += '7'
        elif word == '8':
            list_buffer += '8'
        elif word == '9':
            list_buffer += '9'
        elif word == '!':
            list_buffer += '!'
        elif word == '@':
            list_buffer += '@'
        elif word == '$':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == '^':
            list_buffer += '^'
        elif word == '&':
            list_buffer += '&'
        elif word == '*':
            list_buffer += '*'
        elif word == '(':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == '`':
            list_buffer += '`'
        elif word == '~':
            list_buffer += '~'
        elif word == '-':
            list_buffer += '-'
        elif word == '_':
            list_buffer += '_'
        elif word == '=':
            list_buffer += '='
        elif word == '+':
            list_buffer += '+'
        elif word == '\\':
            list_buffer += '\\'
        elif word == '|':
            list_buffer += '|'
        elif word == '[':
            list_buffer += '['
        elif word == '{':
            list_buffer += '{'
        elif word == ']':
            list_buffer += ']'
        elif word == '}':
            list_buffer += '}'
        elif word == ';':
            list_buffer += ';'
        elif word == ':':
            list_buffer += ':'
        elif word == '\'':
            list_buffer += '\''
        elif word == '"':
            list_buffer += '"'
        elif word == ',':
            list_buffer += ','
        elif word == '<':
            list_buffer += '<'
        elif word == '.':
            list_buffer += '.'
        elif word == '>':
            list_buffer += '>'
        elif word == '/':
            list_buffer += '/'
        elif word == '?':
            list_buffer += '?'
        elif word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'Escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    def get_letterKey(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_militaryKey(self, list_buffer, functional, word):
        if word == 'Alpha':
            list_buffer += 'a'
        elif word == 'Bravo':
            list_buffer += 'b'
        elif word == 'Charlie':
            list_buffer += 'c'
        elif word == 'Delta':
            list_buffer += 'd'
        elif word == 'Echo':
            list_buffer += 'e'
        elif word == 'Foxtrot':
            list_buffer += 'f'
        elif word == 'Golf':
            list_buffer += 'g'
        elif word == 'Hotel':
            list_buffer += 'h'
        elif word == 'India':
            list_buffer += 'i'
        elif word == 'Juliet':
            list_buffer += 'j'
        elif word == 'Kilo':
            list_buffer += 'k'
        elif word == 'Lima':
            list_buffer += 'l'
        elif word == 'Mike':
            list_buffer += 'm'
        elif word == 'November':
            list_buffer += 'n'
        elif word == 'Oscar':
            list_buffer += 'o'
        elif word == 'Papa':
            list_buffer += 'p'
        elif word == 'Quebec':
            list_buffer += 'q'
        elif word == 'Romeo':
            list_buffer += 'r'
        elif word == 'Sierra':
            list_buffer += 's'
        elif word == 'Tango':
            list_buffer += 't'
        elif word == 'Uniform':
            list_buffer += 'u'
        elif word == 'Victor':
            list_buffer += 'v'
        elif word == 'Whiskey':
            list_buffer += 'w'
        elif word == 'Xray':
            list_buffer += 'x'
        elif word == 'Yankee':
            list_buffer += 'y'
        elif word == 'Zulu':
            list_buffer += 'z'
        return list_buffer

    def get_numberKey(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_functionKey(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_unicodeKey(self, list_buffer, functional, word):
        if word == 'Copyright':
            list_buffer += 'U+00A9'
        elif word == 'Em Dash':
            list_buffer += 'U+2014'
        return list_buffer

    # 'Press' <key>

    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('keys.vch', 38, '\'Press\' <key>', e)
            self.firstWord = -1

    # 'Space Bar'

    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_11(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 41, '\'Space Bar\'', e)
            self.firstWord = -1

    def get_special(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    def get_mod(self, list_buffer, functional, word):
        if word == 'Shift':
            list_buffer += 'Shift'
        elif word == 'control':
            list_buffer += 'Ctrl'
        elif word == 'Alt':
            list_buffer += 'Alt'
        elif word == 'Win':
            list_buffer += 'Win'
        return list_buffer

    def get_ndigit(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Press' <special>

    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_special(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('keys.vch', 55, '\'Press\' <special>', e)
            self.firstWord = -1

    # 'Press' <special> <ndigit>

    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_special(extension_arg1, True, word)
            extension_arg1 += '_'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_ndigit(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception as e:
            handle_error('keys.vch', 56, '\'Press\' <special> <ndigit>', e)
            self.firstWord = -1

    # 'Press' <mod> <key>

    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_key(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception as e:
            handle_error('keys.vch', 57, '\'Press\' <mod> <key>', e)
            self.firstWord = -1

    # 'Press' <mod> <key> <ndigit>

    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_key(extension_arg1, True, word)
            extension_arg1 += '_'
            word = fullResults[3 + self.firstWord][0]
            extension_arg1 = self.get_ndigit(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception as e:
            handle_error('keys.vch', 58, '\'Press\' <mod> <key> <ndigit>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <key> <ndigit>

    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[3 + self.firstWord][0]
            extension_arg1 = self.get_key(extension_arg1, True, word)
            extension_arg1 += '_'
            word = fullResults[4 + self.firstWord][0]
            extension_arg1 = self.get_ndigit(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception as e:
            handle_error('keys.vch', 59, '\'Press\' <mod> <mod> <key> <ndigit>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <mod> <key> <ndigit>

    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[3 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[4 + self.firstWord][0]
            extension_arg1 = self.get_key(extension_arg1, True, word)
            extension_arg1 += '_'
            word = fullResults[5 + self.firstWord][0]
            extension_arg1 = self.get_ndigit(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception as e:
            handle_error('keys.vch', 60, '\'Press\' <mod> <mod> <mod> <key> <ndigit>', e)
            self.firstWord = -1

    def get_capMilitaryKey(self, list_buffer, functional, word):
        if word == 'Cap Alpha':
            list_buffer += 'A'
        elif word == 'Cap Bravo':
            list_buffer += 'B'
        elif word == 'Cap Charlie':
            list_buffer += 'C'
        elif word == 'Cap Delta':
            list_buffer += 'D'
        elif word == 'Cap Echo':
            list_buffer += 'E'
        elif word == 'Cap Golf':
            list_buffer += 'G'
        elif word == 'Cap Hotel':
            list_buffer += 'H'
        elif word == 'Cap India':
            list_buffer += 'I'
        elif word == 'Cap Juliet':
            list_buffer += 'J'
        elif word == 'Cap Kilo':
            list_buffer += 'K'
        elif word == 'Cap Mike':
            list_buffer += 'M'
        elif word == 'Cap November':
            list_buffer += 'N'
        elif word == 'Cap Oscar':
            list_buffer += 'O'
        elif word == 'Cap Papa':
            list_buffer += 'P'
        elif word == 'Cap Quebec':
            list_buffer += 'Q'
        elif word == 'Cap Sierra':
            list_buffer += 'S'
        elif word == 'Cap Tango':
            list_buffer += 'T'
        elif word == 'Cap Uniform':
            list_buffer += 'U'
        elif word == 'Cap Victor':
            list_buffer += 'V'
        elif word == 'Cap Whiskey':
            list_buffer += 'W'
        elif word == 'Cap Xray':
            list_buffer += 'X'
        elif word == 'Cap Yankee':
            list_buffer += 'Y'
        elif word == 'Cap Zulu':
            list_buffer += 'Z'
        return list_buffer

    def get_symbolKey(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    # 'test box'

    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Testing'
            dragon_arg2 = ''
            dragon_arg2 += '65'
            dragon_arg3 = ''
            dragon_arg3 += 'Test Window'
            saved_firstWord = self.firstWord
            call_Dragon('MsgBoxConfirm', 'sis', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_18(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 10, '\'test box\'', e)
            self.firstWord = -1

    # 'test voice'

    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Welcome to the jungle'
            saved_firstWord = self.firstWord
            call_Dragon('TTSPlayString', 'ss', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_19(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 11, '\'test voice\'', e)
            self.firstWord = -1

    # 'save file'

    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+s}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 14, '\'save file\'', e)
            self.firstWord = -1

    # 'safe file'

    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+s}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_21(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 15, '\'safe file\'', e)
            self.firstWord = -1

    # 'new file'

    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_22(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 16, '\'new file\'', e)
            self.firstWord = -1

    # 'open file'

    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}'
            top_buffer += 'o'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_23(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 17, '\'open file\'', e)
            self.firstWord = -1

    # 'close file'

    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_24(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 18, '\'close file\'', e)
            self.firstWord = -1

    # 'select all'

    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_25(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 19, '\'select all\'', e)
            self.firstWord = -1

    # 'undo that'

    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+z}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_26(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 20, '\'undo that\'', e)
            self.firstWord = -1

    # 'copy that'

    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_27(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 21, '\'copy that\'', e)
            self.firstWord = -1

    # 'paste that'

    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 22, '\'paste that\'', e)
            self.firstWord = -1

    # 'cut that'

    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+x}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_29(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 23, '\'cut that\'', e)
            self.firstWord = -1

    # 'print that'

    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+p}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_30(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 24, '\'print that\'', e)
            self.firstWord = -1

    # 'insert text' <_anything>

    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 26, '\'insert text\' <_anything>', e)
            self.firstWord = -1

    # 'find' <_anything>

    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+f}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 27, '\'find\' <_anything>', e)
            self.firstWord = -1

    # 'Vocola line'

    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '----------------'
            import vocola_ext_vocola
            vocola_ext_vocola.vocola_print(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_33(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 28, '\'Vocola line\'', e)
            self.firstWord = -1

    def get_direction(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_up_down(self, list_buffer, functional, word):
        if word == '{ Back':
            list_buffer += 'Up'
        elif word == 'Forward':
            list_buffer += 'Down'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down }':
            list_buffer += 'Down }'
        return list_buffer

    def get_left_right(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_start_end(self, list_buffer, functional, word):
        if word == '{ Beginning':
            list_buffer += '{Home}'
        elif word == 'Start':
            list_buffer += '{Home}'
        elif word == 'End':
            list_buffer += '{End}'
            list_buffer += '}'
        return list_buffer

    def get_to_start_end(self, list_buffer, functional, word):
        if word == '{ Beginning':
            list_buffer += 'Home'
        elif word == 'Start':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
            list_buffer += '}'
        return list_buffer

    # 'crazy 1 up'

    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{up_1}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_34(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 39, '\'crazy 1 up\'', e)
            self.firstWord = -1

    # 'crazy 1 down'

    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{down_1}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_35(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 40, '\'crazy 1 down\'', e)
            self.firstWord = -1

    # 'crazy 1 right'

    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{right_1}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_36(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 41, '\'crazy 1 right\'', e)
            self.firstWord = -1

    # 'crazy 1 left'

    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{left_1}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_37(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 42, '\'crazy 1 left\'', e)
            self.firstWord = -1

    # ('Grab') 'one letter left'

    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+Left_1}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_38(words[2:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 60, '(\'Grab\') \'one letter left\'', e)
            self.firstWord = -1

    # ('Grab') 'one letter right'

    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+Right_1}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_39(words[2:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 61, '(\'Grab\') \'one letter right\'', e)
            self.firstWord = -1

    # ('Grab') 'one word left'

    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Left_1}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_40(words[2:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 62, '(\'Grab\') \'one word left\'', e)
            self.firstWord = -1

    # ('Grab') 'one word right'

    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Right_1}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_41(words[2:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 63, '(\'Grab\') \'one word right\'', e)
            self.firstWord = -1

    # ('Grab') ('two' | '2') 'Words right'

    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Right_2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_42(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 64, '(\'Grab\') (\'two\' | \'2\') \'Words right\'', e)
            self.firstWord = -1

    # ('Grab') ('three' | '3') 'Words right'

    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Right_3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_43(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 65, '(\'Grab\') (\'three\' | \'3\') \'Words right\'', e)
            self.firstWord = -1

    # ('Grab') ('four' | '4') 'Words right'

    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Right_4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_44(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 66, '(\'Grab\') (\'four\' | \'4\') \'Words right\'', e)
            self.firstWord = -1

    # ('Grab') 'forwards right'

    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Right_4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_45(words[2:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 67, '(\'Grab\') \'forwards right\'', e)
            self.firstWord = -1

    # ('Grab') ('five' | '5') 'Words right'

    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Right_5}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_46(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 68, '(\'Grab\') (\'five\' | \'5\') \'Words right\'', e)
            self.firstWord = -1

    # ('Grab') ('six' | '6') 'Words right'

    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Right_6}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_47(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 69, '(\'Grab\') (\'six\' | \'6\') \'Words right\'', e)
            self.firstWord = -1

    # ('Grab') ('seven' | '7') 'Words right'

    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Right_7}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_48(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 70, '(\'Grab\') (\'seven\' | \'7\') \'Words right\'', e)
            self.firstWord = -1

    # ('Grab') ('eight' | '8') 'Words right'

    def gotResults_49(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Right_8}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_49(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 71, '(\'Grab\') (\'eight\' | \'8\') \'Words right\'', e)
            self.firstWord = -1

    # ('Grab') ('nine' | '9') 'Words right'

    def gotResults_50(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Right_9}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_50(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 72, '(\'Grab\') (\'nine\' | \'9\') \'Words right\'', e)
            self.firstWord = -1

    # ('Grab') ('two' | '2') 'Words left'

    def gotResults_51(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Left_2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_51(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 73, '(\'Grab\') (\'two\' | \'2\') \'Words left\'', e)
            self.firstWord = -1

    # ('Grab') ('three' | '3') 'Words left'

    def gotResults_52(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Left_3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_52(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 74, '(\'Grab\') (\'three\' | \'3\') \'Words left\'', e)
            self.firstWord = -1

    # ('Grab') ('four' | '4') 'Words left'

    def gotResults_53(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Left_4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_53(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 75, '(\'Grab\') (\'four\' | \'4\') \'Words left\'', e)
            self.firstWord = -1

    # ('Grab') 'forwards left'

    def gotResults_54(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Left_4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_54(words[2:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 76, '(\'Grab\') \'forwards left\'', e)
            self.firstWord = -1

    # ('Grab') ('five' | '5') 'Words left'

    def gotResults_55(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Left_5}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_55(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 77, '(\'Grab\') (\'five\' | \'5\') \'Words left\'', e)
            self.firstWord = -1

    # ('Grab') ('six' | '6') 'Words left'

    def gotResults_56(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Left_6}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_56(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 78, '(\'Grab\') (\'six\' | \'6\') \'Words left\'', e)
            self.firstWord = -1

    # ('Grab') ('seven' | '7') 'Words left'

    def gotResults_57(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Left_7}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_57(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 79, '(\'Grab\') (\'seven\' | \'7\') \'Words left\'', e)
            self.firstWord = -1

    # ('Grab') ('eight' | '8') 'Words left'

    def gotResults_58(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Left_8}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_58(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 80, '(\'Grab\') (\'eight\' | \'8\') \'Words left\'', e)
            self.firstWord = -1

    # ('Grab') ('nine' | '9') 'Words left'

    def gotResults_59(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Left_9}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_59(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 81, '(\'Grab\') (\'nine\' | \'9\') \'Words left\'', e)
            self.firstWord = -1

    # 'grab one line down'

    def gotResults_60(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Home}{Shift+end}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_60(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 87, '\'grab one line down\'', e)
            self.firstWord = -1

    # 'grab' ('two' | '2') 'lines down'

    def gotResults_61(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{End}{Home}{Shift+down_2}{Shift+left_1}{Shift+end}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_61(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 88, '\'grab\' (\'two\' | \'2\') \'lines down\'', e)
            self.firstWord = -1

    # 'grab' ('three' | '3') 'lines down'

    def gotResults_62(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{End}{Home}{Shift+down_3}{Shift+left_1}{Shift+end}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_62(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 89, '\'grab\' (\'three\' | \'3\') \'lines down\'', e)
            self.firstWord = -1

    # 'grab' ('four' | '4') 'lines down'

    def gotResults_63(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{End}{Home}{Shift+down_4}{Shift+left_1}{Shift+end}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_63(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 90, '\'grab\' (\'four\' | \'4\') \'lines down\'', e)
            self.firstWord = -1

    # 'grab' ('five' | '5') 'lines down'

    def gotResults_64(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{End}{Home}{Shift+down_5}{Shift+left_1}{Shift+end}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_64(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 91, '\'grab\' (\'five\' | \'5\') \'lines down\'', e)
            self.firstWord = -1

    # 'grab' ('six' | '6') 'lines down'

    def gotResults_65(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{End}{Home}{Shift+down_6}{Shift+left_1}{Shift+end}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_65(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 92, '\'grab\' (\'six\' | \'6\') \'lines down\'', e)
            self.firstWord = -1

    # 'grab' ('seven' | '7') 'lines down'

    def gotResults_66(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{End}{Home}{Shift+down_7}{Shift+left_1}{Shift+end}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_66(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 93, '\'grab\' (\'seven\' | \'7\') \'lines down\'', e)
            self.firstWord = -1

    # 'grab' ('eight' | '8') 'lines down'

    def gotResults_67(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{End}{Home}{Shift+down_8}{Shift+left_1}{Shift+end}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_67(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 94, '\'grab\' (\'eight\' | \'8\') \'lines down\'', e)
            self.firstWord = -1

    # 'grab' ('nine' | '9') 'lines down'

    def gotResults_68(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{End}{Home}{Shift+down_9}{Shift+left_1}{Shift+end}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_68(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 95, '\'grab\' (\'nine\' | \'9\') \'lines down\'', e)
            self.firstWord = -1

    # 'grab one line up'

    def gotResults_69(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Home}{Shift+end}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_69(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 97, '\'grab one line up\'', e)
            self.firstWord = -1

    # 'grab' ('two' | '2') 'lines up'

    def gotResults_70(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Home}{End}{Shift+up_2}{Shift+right_1}{Shift+home}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_70(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 98, '\'grab\' (\'two\' | \'2\') \'lines up\'', e)
            self.firstWord = -1

    # 'grab' ('three' | '3') 'lines up'

    def gotResults_71(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Home}{End}{Shift+up_3}{Shift+right_1}{Shift+home}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_71(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 99, '\'grab\' (\'three\' | \'3\') \'lines up\'', e)
            self.firstWord = -1

    # 'grab' ('four' | '4') 'lines up'

    def gotResults_72(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Home}{End}{Shift+up_4}{Shift+right_1}{Shift+home}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_72(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 100, '\'grab\' (\'four\' | \'4\') \'lines up\'', e)
            self.firstWord = -1

    # 'grab' ('five' | '5') 'lines up'

    def gotResults_73(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Home}{End}{Shift+up_5}{Shift+right_1}{Shift+home}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_73(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 101, '\'grab\' (\'five\' | \'5\') \'lines up\'', e)
            self.firstWord = -1

    # 'grab' ('six' | '6') 'lines up'

    def gotResults_74(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Home}{End}{Shift+up_6}{Shift+right_1}{Shift+home}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_74(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 102, '\'grab\' (\'six\' | \'6\') \'lines up\'', e)
            self.firstWord = -1

    # 'grab' ('seven' | '7') 'lines up'

    def gotResults_75(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Home}{End}{Shift+up_7}{Shift+right_1}{Shift+home}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_75(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 103, '\'grab\' (\'seven\' | \'7\') \'lines up\'', e)
            self.firstWord = -1

    # 'grab' ('eight' | '8') 'lines up'

    def gotResults_76(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Home}{End}{Shift+up_8}{Shift+right_1}{Shift+home}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_76(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 104, '\'grab\' (\'eight\' | \'8\') \'lines up\'', e)
            self.firstWord = -1

    # 'grab' ('nine' | '9') 'lines up'

    def gotResults_77(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Home}{End}{Shift+up_9}{Shift+right_1}{Shift+home}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_77(words[3:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 105, '\'grab\' (\'nine\' | \'9\') \'lines up\'', e)
            self.firstWord = -1

    # 'line start'

    def gotResults_78(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_78(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 112, '\'line start\'', e)
            self.firstWord = -1

    # 'line end'

    def gotResults_79(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{end}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_79(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 113, '\'line end\'', e)
            self.firstWord = -1

    # 'Delete line delete'

    def gotResults_80(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Home}{Shift+End}{Del}{Del}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_80(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 115, '\'Delete line delete\'', e)
            self.firstWord = -1

    # 'Flow Start'

    def gotResults_81(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_81(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 130, '\'Flow Start\'', e)
            self.firstWord = -1

    # 'Flow End'

    def gotResults_82(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+End}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_82(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 131, '\'Flow End\'', e)
            self.firstWord = -1

    # 'Grab to flow start'

    def gotResults_83(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_83(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 132, '\'Grab to flow start\'', e)
            self.firstWord = -1

    # 'Grab to flow end'

    def gotResults_84(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+End}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_84(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 133, '\'Grab to flow end\'', e)
            self.firstWord = -1

    # 'camel' <_anything>

    def gotResults_85(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("x" + %s).title()[1:].replace(" ","")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 175, '\'camel\' <_anything>', e)
            self.firstWord = -1

    # 'camelcase' <_anything>

    def gotResults_86(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("x" + %s).title()[1:].replace(" ","")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 176, '\'camelcase\' <_anything>', e)
            self.firstWord = -1

    # 'Pascal' <_anything>

    def gotResults_87(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).title()[:].replace(" ","")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 177, '\'Pascal\' <_anything>', e)
            self.firstWord = -1

    # 'Title' <_anything>

    def gotResults_88(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).title()[:].replace(" ","")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 178, '\'Title\' <_anything>', e)
            self.firstWord = -1

    # 'Cap Smush' <_anything>

    def gotResults_89(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).title()[:].replace(" ","")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 179, '\'Cap Smush\' <_anything>', e)
            self.firstWord = -1

    # 'score' <_anything>

    def gotResults_90(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).lower()[:].replace(" ","_")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 180, '\'score\' <_anything>', e)
            self.firstWord = -1

    # 'underscore' <_anything>

    def gotResults_91(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).lower()[:].replace(" ","_")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 181, '\'underscore\' <_anything>', e)
            self.firstWord = -1

    # 'underscore cap' <_anything>

    def gotResults_92(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).upper()[:].replace(" ","_")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 182, '\'underscore cap\' <_anything>', e)
            self.firstWord = -1

    # 'hype' <_anything>

    def gotResults_93(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).lower()[:].replace(" ","-")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 183, '\'hype\' <_anything>', e)
            self.firstWord = -1

    # 'terse' <_anything>

    def gotResults_94(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).lower()[:].replace(" ","")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 184, '\'terse\' <_anything>', e)
            self.firstWord = -1

    # 'smush' <_anything>

    def gotResults_95(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).lower()[:].replace(" ","")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 185, '\'smush\' <_anything>', e)
            self.firstWord = -1

    # 'lower case' <_anything>

    def gotResults_96(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).lower()'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 186, '\'lower case\' <_anything>', e)
            self.firstWord = -1

    # 'lower case smush' <_anything>

    def gotResults_97(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).lower()[:].replace(" ","")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 187, '\'lower case smush\' <_anything>', e)
            self.firstWord = -1

    # 'upper case' <_anything>

    def gotResults_98(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).upper()'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 188, '\'upper case\' <_anything>', e)
            self.firstWord = -1

    # 'upper case smush' <_anything>

    def gotResults_99(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            eval_template_arg1 = ''
            eval_template_arg1 += '("" + %s).upper()[:].replace(" ","")'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += word
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 189, '\'upper case smush\' <_anything>', e)
            self.firstWord = -1

    # 'left square bracket'

    def gotResults_100(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '['
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_100(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 191, '\'left square bracket\'', e)
            self.firstWord = -1

    # 'write square bracket'

    def gotResults_101(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ']'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_101(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 192, '\'write square bracket\'', e)
            self.firstWord = -1

    # 'left curly cube bracket'

    def gotResults_102(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_102(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 193, '\'left curly cube bracket\'', e)
            self.firstWord = -1

    # 'curlicues bracket'

    def gotResults_103(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_103(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 194, '\'curlicues bracket\'', e)
            self.firstWord = -1

    # 'curlicues right bracket'

    def gotResults_104(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_104(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 195, '\'curlicues right bracket\'', e)
            self.firstWord = -1

    # 'curlicues left bracket'

    def gotResults_105(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_105(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 196, '\'curlicues left bracket\'', e)
            self.firstWord = -1

    # 'write curly queue bracket'

    def gotResults_106(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_106(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 197, '\'write curly queue bracket\'', e)
            self.firstWord = -1

    # 'write paren'

    def gotResults_107(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '('
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_107(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 198, '\'write paren\'', e)
            self.firstWord = -1

    # 'left paren'

    def gotResults_108(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ')'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_108(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 199, '\'left paren\'', e)
            self.firstWord = -1

    # 'left and right parens'

    def gotResults_109(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' ()'
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_109(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 200, '\'left and right parens\'', e)
            self.firstWord = -1

    # 'left and right paren'

    def gotResults_110(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' ()'
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_110(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 201, '\'left and right paren\'', e)
            self.firstWord = -1

    # 'leptin right paren'

    def gotResults_111(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' ()'
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_111(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 202, '\'leptin right paren\'', e)
            self.firstWord = -1

    # 'left and)'

    def gotResults_112(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' ()'
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_112(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 203, '\'left and)\'', e)
            self.firstWord = -1

    def get_DaProgramName(self, list_buffer, functional, word):
        if word == 'firefox':
            list_buffer += 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'
        elif word == 'firefox 32':
            list_buffer += 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'
        elif word == 'firefox 64':
            list_buffer += 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'
        elif word == 'firefox work':
            list_buffer += 'C:\\Users\\jungar\\AppData\\Local\\Mozilla Firefox\\firefox.exe'
        elif word == 'Adam':
            list_buffer += 'C:\\Users\\junga\\AppData\\Local\\atom\\atom.exe'
        elif word == 'atom':
            list_buffer += 'C:\\Users\\junga\\AppData\\Local\\atom\\atom.exe'
        elif word == 'Microsoft Word':
            list_buffer += 'C:\\Program Files\\Microsoft Office\\root\\Office16\\WINWORD.EXE'
        elif word == 'Microsoft Excel':
            list_buffer += 'C:\\Program Files\\Microsoft Office\\root\\Office16\\EXCEL.EXE'
        elif word == 'Word 2016':
            list_buffer += 'C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\WINWORD.EXE'
        elif word == 'Excel 2016':
            list_buffer += 'C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\EXCEL.EXE'
        elif word == 'Word work':
            list_buffer += 'C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\WINWORD.EXE'
        elif word == 'Excel work':
            list_buffer += 'C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\EXCEL.EXE'
        elif word == 'Outlook 2016':
            list_buffer += 'C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\OUTLOOK.EXE'
        elif word == 'Jeannie':
            list_buffer += 'C:\\Program Files (x86)\\Geany\\bin\\geany.exe'
        elif word == 'iTunes':
            list_buffer += 'C:\\Users\\junga\\AppData\\Local\\Microsoft\\WindowsApps\\iTunes.exe'
        elif word == 'kay diff 3':
            list_buffer += 'C:\\Program Files\\KDiff3\\bin\\kdiff3.exe'
        elif word == 'file zilla':
            list_buffer += 'C:\\Program Files (x86)\\FileZilla FTP Client\\filezilla.exe'
        elif word == 'AnyConnect client':
            list_buffer += 'C:\\Program Files (x86)\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnui.exe'
        elif word == 'AnyConnect':
            list_buffer += 'C:\\Program Files (x86)\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnui.exe'
        elif word == 'Cisco AnyConnect':
            list_buffer += 'C:\\Program Files (x86)\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnui.exe'
        elif word == 'notepad':
            list_buffer += 'c:\\windows\\system32\\notepad.exe'
        elif word == 'notepad plus plus':
            list_buffer += 'CMDC:\\Program Files (x86)\\Notepad++\\notepad++.exe'
        elif word == 'Command Prompt':
            list_buffer += 'C:\\Windows\\System32\\cmd.exe'
        elif word == 'CMD':
            list_buffer += 'powershell -Command \'Start-Process cmd -Verb RunAs\''
        elif word == 'Explorer':
            list_buffer += 'C:\\Windows\\explorer'
        elif word == 'file Explorer':
            list_buffer += 'C:\\Windows\\explorer'
        elif word == 'CLI':
            list_buffer += '%windir%\\system32\\cmd.exe'
        elif word == 'command line':
            list_buffer += 'C:\\windows\\system32\\cmd.exe'
        elif word == 'Chrome':
            list_buffer += 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'
        elif word == 'Atom':
            list_buffer += 'C:\\Users\\junga\\AppData\\Local\\atom\\atom.exe'
        return list_buffer

    # 'run' <DaProgramName>

    def gotResults_113(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            word = fullResults[1 + self.firstWord][0]
            dragon_arg1 = self.get_DaProgramName(dragon_arg1, True, word)
            saved_firstWord = self.firstWord
            call_Dragon('AppBringUp', 'ssis', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 240, '\'run\' <DaProgramName>', e)
            self.firstWord = -1

    # 'open Environment Variables'

    def gotResults_114(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'C:\\Windows\\System32\\SYSDM.CPL'
            saved_firstWord = self.firstWord
            call_Dragon('AppBringUp', 'ssis', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_114(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 241, '\'open Environment Variables\'', e)
            self.firstWord = -1

    # 'Manage Computer'

    def gotResults_115(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'compmgmt.msc \\s'
            saved_firstWord = self.firstWord
            call_Dragon('AppBringUp', 'ssis', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_115(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 243, '\'Manage Computer\'', e)
            self.firstWord = -1

    # 'Add Remove Programs'

    def gotResults_116(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'appwiz.cpl'
            saved_firstWord = self.firstWord
            call_Dragon('AppBringUp', 'ssis', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_116(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 244, '\'Add Remove Programs\'', e)
            self.firstWord = -1

    # 'Remove Programs'

    def gotResults_225(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'appwiz.cpl'
            saved_firstWord = self.firstWord
            call_Dragon('AppBringUp', 'ssis', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_225(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 244, '\'Remove Programs\'', e)
            self.firstWord = -1

    # 'pipe'

    def gotResults_117(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '|'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_117(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 245, '\'pipe\'', e)
            self.firstWord = -1

    # 'single quote'

    def gotResults_118(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '\''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_118(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 246, '\'single quote\'', e)
            self.firstWord = -1

    # 'double quote'

    def gotResults_119(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '"'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_119(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 248, '\'double quote\'', e)
            self.firstWord = -1

    # 'wifi'

    def gotResults_120(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'wifi'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_120(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 249, '\'wifi\'', e)
            self.firstWord = -1

    # 'wifi'

    def gotResults_121(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'wifi'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_121(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 250, '\'wifi\'', e)
            self.firstWord = -1

    # 'H 323'

    def gotResults_122(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'H.323'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_122(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 258, '\'H 323\'', e)
            self.firstWord = -1

    # 'H dot 323'

    def gotResults_123(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'H.323'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_123(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 259, '\'H dot 323\'', e)
            self.firstWord = -1

    # 'Q 931'

    def gotResults_124(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Q931'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_124(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 260, '\'Q 931\'', e)
            self.firstWord = -1

    # 'Q 921'

    def gotResults_125(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Q921'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_125(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 261, '\'Q 921\'', e)
            self.firstWord = -1

    # 'wap'

    def gotResults_126(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'WAP'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_126(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 262, '\'wap\'', e)
            self.firstWord = -1

    # 'waps'

    def gotResults_127(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'WAPs'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_127(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 263, '\'waps\'', e)
            self.firstWord = -1

    # 'W P A V 2'

    def gotResults_128(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'WPAv2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_128(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 264, '\'W P A V 2\'', e)
            self.firstWord = -1

    # 'WPA V2'

    def gotResults_129(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'WPAv2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_129(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 265, '\'WPA V2\'', e)
            self.firstWord = -1

    # 'WPA V to'

    def gotResults_130(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'WPAv2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_130(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 266, '\'WPA V to\'', e)
            self.firstWord = -1

    # 'The LAN'

    def gotResults_131(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'vlan'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_131(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 267, '\'The LAN\'', e)
            self.firstWord = -1

    # 'V LAN'

    def gotResults_132(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'vlan'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_132(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 268, '\'V LAN\'', e)
            self.firstWord = -1

    # 'sert'

    def gotResults_133(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Cert'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_133(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 271, '\'sert\'', e)
            self.firstWord = -1

    # 'tour on toe'

    def gotResults_134(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Toronto'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_134(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 272, '\'tour on toe\'', e)
            self.firstWord = -1

    # 'ver I zon'

    def gotResults_135(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Verizon'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_135(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 273, '\'ver I zon\'', e)
            self.firstWord = -1

    # 'com cast'

    def gotResults_136(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Comcast'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_136(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 274, '\'com cast\'', e)
            self.firstWord = -1

    # 'ping'

    def gotResults_137(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ping'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_137(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 276, '\'ping\'', e)
            self.firstWord = -1

    # 'back to RE'

    def gotResults_138(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'battery'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_138(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 277, '\'back to RE\'', e)
            self.firstWord = -1

    # 'C U C M'

    def gotResults_139(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'CUCM'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_139(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 278, '\'C U C M\'', e)
            self.firstWord = -1

    # 'UCCX'

    def gotResults_140(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'UCCX'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_140(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 279, '\'UCCX\'', e)
            self.firstWord = -1

    # 'UC CX'

    def gotResults_141(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'UCCX'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_141(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 280, '\'UC CX\'', e)
            self.firstWord = -1

    # 'UC'

    def gotResults_142(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'UC'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_142(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 281, '\'UC\'', e)
            self.firstWord = -1

    # 'Flex connect'

    def gotResults_143(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'flexconnect'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_143(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 282, '\'Flex connect\'', e)
            self.firstWord = -1

    # 'net flow'

    def gotResults_144(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'netflow'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_144(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 283, '\'net flow\'', e)
            self.firstWord = -1

    # 'dot HTM'

    def gotResults_145(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.htm'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_145(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 289, '\'dot HTM\'', e)
            self.firstWord = -1

    # 'dot HTML'

    def gotResults_146(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.html'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_146(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 290, '\'dot HTML\'', e)
            self.firstWord = -1

    # 'dot net'

    def gotResults_147(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.net'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_147(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 291, '\'dot net\'', e)
            self.firstWord = -1

    # 'dot com'

    def gotResults_148(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.com'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_148(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 292, '\'dot com\'', e)
            self.firstWord = -1

    # '. PHP'

    def gotResults_149(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.php'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_149(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 293, '\'. PHP\'', e)
            self.firstWord = -1

    # '. CFG'

    def gotResults_150(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.cfg'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_150(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 294, '\'. CFG\'', e)
            self.firstWord = -1

    # '.CFG'

    def gotResults_151(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.cfg'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_151(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 295, '\'.CFG\'', e)
            self.firstWord = -1

    # '. doc'

    def gotResults_152(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.doc'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_152(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 296, '\'. doc\'', e)
            self.firstWord = -1

    # '. doc x'

    def gotResults_153(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.docx'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_153(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 297, '\'. doc x\'', e)
            self.firstWord = -1

    # '. xls'

    def gotResults_154(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.xls'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_154(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 298, '\'. xls\'', e)
            self.firstWord = -1

    # '. xls x'

    def gotResults_155(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.xlsx'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_155(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 299, '\'. xls x\'', e)
            self.firstWord = -1

    # '. VHV'

    def gotResults_156(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.php'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_156(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 300, '\'. VHV\'', e)
            self.firstWord = -1

    # '. VHP'

    def gotResults_157(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.php'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_157(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 301, '\'. VHP\'', e)
            self.firstWord = -1

    # '. Com'

    def gotResults_158(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.com'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_158(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 302, '\'. Com\'', e)
            self.firstWord = -1

    # '. com'

    def gotResults_159(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.com'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_159(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 303, '\'. com\'', e)
            self.firstWord = -1

    # '. Edu'

    def gotResults_160(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.edu'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_160(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 304, '\'. Edu\'', e)
            self.firstWord = -1

    # '. gov'

    def gotResults_161(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.gov'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_161(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 305, '\'. gov\'', e)
            self.firstWord = -1

    # '. TXT'

    def gotResults_162(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.txt'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_162(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 306, '\'. TXT\'', e)
            self.firstWord = -1

    # 'padded equals'

    def gotResults_163(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' = '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_163(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 310, '\'padded equals\'', e)
            self.firstWord = -1

    # 'padded equal sign'

    def gotResults_164(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' = '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_164(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 311, '\'padded equal sign\'', e)
            self.firstWord = -1

    # 'padded ='

    def gotResults_165(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' = '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_165(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 312, '\'padded =\'', e)
            self.firstWord = -1

    # 'padded ='

    def gotResults_166(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' = '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_166(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 313, '\'padded =\'', e)
            self.firstWord = -1

    # 'padded dash'

    def gotResults_167(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' - '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_167(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 314, '\'padded dash\'', e)
            self.firstWord = -1

    # 'padded hyphen'

    def gotResults_168(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' - '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_168(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 315, '\'padded hyphen\'', e)
            self.firstWord = -1

    # 'padded pipe'

    def gotResults_169(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' | '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_169(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 316, '\'padded pipe\'', e)
            self.firstWord = -1

    # 'T FTP'

    def gotResults_170(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'TFTP'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_170(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 317, '\'T FTP\'', e)
            self.firstWord = -1

    # 'VPN v 4'

    def gotResults_171(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'VPNv4'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_171(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 318, '\'VPN v 4\'', e)
            self.firstWord = -1

    # 'VPN before'

    def gotResults_172(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'VPNv4'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_172(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 319, '\'VPN before\'', e)
            self.firstWord = -1

    # 'mpls'

    def gotResults_173(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'MPLS'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_173(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 320, '\'mpls\'', e)
            self.firstWord = -1

    # 'I G P'

    def gotResults_174(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'IGP'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_174(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 321, '\'I G P\'', e)
            self.firstWord = -1

    # 'B G P'

    def gotResults_175(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'BGP'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_175(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 322, '\'B G P\'', e)
            self.firstWord = -1

    # 'B G P v 4'

    def gotResults_176(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'BGPv4'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_176(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 323, '\'B G P v 4\'', e)
            self.firstWord = -1

    # 'B G P before'

    def gotResults_177(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'BGPv4'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_177(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 324, '\'B G P before\'', e)
            self.firstWord = -1

    # 'B G P fore'

    def gotResults_178(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'BGPv4'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_178(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 325, '\'B G P fore\'', e)
            self.firstWord = -1

    # 'BGP before'

    def gotResults_179(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'BGPv4'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_179(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 326, '\'BGP before\'', e)
            self.firstWord = -1

    # 'O S P F'

    def gotResults_180(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'OSPF'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_180(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 327, '\'O S P F\'', e)
            self.firstWord = -1

    # 'E I G R P'

    def gotResults_181(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'EIGRP'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_181(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 328, '\'E I G R P\'', e)
            self.firstWord = -1

    # 'EI GRP'

    def gotResults_182(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'EIGRP'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_182(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 329, '\'EI GRP\'', e)
            self.firstWord = -1

    # 'N R P E'

    def gotResults_183(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'NRPE'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_183(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 330, '\'N R P E\'', e)
            self.firstWord = -1

    # 'an RPE'

    def gotResults_184(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'NRPE'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_184(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 331, '\'an RPE\'', e)
            self.firstWord = -1

    # 'A ray'

    def gotResults_185(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'array'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_185(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 332, '\'A ray\'', e)
            self.firstWord = -1

    # 'are right'

    def gotResults_186(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'array'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_186(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 333, '\'are right\'', e)
            self.firstWord = -1

    # 'i phone'

    def gotResults_187(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'iPhone'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_187(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 334, '\'i phone\'', e)
            self.firstWord = -1

    # 'sip'

    def gotResults_188(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sip'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_188(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 335, '\'sip\'', e)
            self.firstWord = -1

    # 'admin'

    def gotResults_189(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'admin'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_189(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 337, '\'admin\'', e)
            self.firstWord = -1

    # 'Log stash'

    def gotResults_190(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'logstash'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_190(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 338, '\'Log stash\'', e)
            self.firstWord = -1

    # 'oo boon 2'

    def gotResults_191(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ubuntu'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_191(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 339, '\'oo boon 2\'', e)
            self.firstWord = -1

    # 'cabana'

    def gotResults_192(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'kibana'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_192(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 340, '\'cabana\'', e)
            self.firstWord = -1

    # 'ki bah nah'

    def gotResults_193(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'kibana'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_193(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 341, '\'ki bah nah\'', e)
            self.firstWord = -1

    # 'chip on a'

    def gotResults_194(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'kibana'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_194(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 342, '\'chip on a\'', e)
            self.firstWord = -1

    # 'tip on a'

    def gotResults_195(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'kibana'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_195(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 343, '\'tip on a\'', e)
            self.firstWord = -1

    # 'con fig'

    def gotResults_196(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'config'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_196(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 344, '\'con fig\'', e)
            self.firstWord = -1

    # 'sis log'

    def gotResults_197(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'syslog'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_197(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 345, '\'sis log\'', e)
            self.firstWord = -1

    # 'ver eye zon'

    def gotResults_198(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Verizon'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_198(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 347, '\'ver eye zon\'', e)
            self.firstWord = -1

    # 'net mask'

    def gotResults_199(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'netmask'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_199(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 348, '\'net mask\'', e)
            self.firstWord = -1

    # 'root'

    def gotResults_200(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'root'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_200(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 349, '\'root\'', e)
            self.firstWord = -1

    # 'rowt'

    def gotResults_201(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'route'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_201(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 350, '\'rowt\'', e)
            self.firstWord = -1

    # 'bang'

    def gotResults_202(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '!'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_202(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 351, '\'bang\'', e)
            self.firstWord = -1

    # 'Gigabit per second'

    def gotResults_203(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Gbps'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_203(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 352, '\'Gigabit per second\'', e)
            self.firstWord = -1

    # 'QOS'

    def gotResults_204(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'QoS'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_204(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 353, '\'QOS\'', e)
            self.firstWord = -1

    # 'SAV'

    def gotResults_205(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ASAv'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_205(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 354, '\'SAV\'', e)
            self.firstWord = -1

    # 'like the one'

    def gotResults_206(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'IKEv1'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_206(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 355, '\'like the one\'', e)
            self.firstWord = -1

    # 'IKEv1 IQ to IKE v 1'

    def gotResults_207(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'IKEv1'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_207(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 356, '\'IKEv1 IQ to IKE v 1\'', e)
            self.firstWord = -1

    # 'IQ one'

    def gotResults_208(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'IKEv1'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_208(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 357, '\'IQ one\'', e)
            self.firstWord = -1

    # 'IKEv2'

    def gotResults_209(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'IKEv2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_209(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 359, '\'IKEv2\'', e)
            self.firstWord = -1

    # 'IQ to'

    def gotResults_210(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'IKEv2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_210(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 360, '\'IQ to\'', e)
            self.firstWord = -1

    # 'Ike be to'

    def gotResults_211(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'IKEv2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_211(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 361, '\'Ike be to\'', e)
            self.firstWord = -1

    # 'vocola two'

    def gotResults_212(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Vocola2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_212(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 362, '\'vocola two\'', e)
            self.firstWord = -1

    # 'vo cola to'

    def gotResults_213(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Vocola2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_213(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 363, '\'vo cola to\'', e)
            self.firstWord = -1

    # 'vocola to'

    def gotResults_214(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Vocola2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_214(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 364, '\'vocola to\'', e)
            self.firstWord = -1

    # 'vocola two'

    def gotResults_215(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Vocola2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_215(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 365, '\'vocola two\'', e)
            self.firstWord = -1

    # 'vocola 2'

    def gotResults_216(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Vocola2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_216(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 366, '\'vocola 2\'', e)
            self.firstWord = -1

    # 'vo cola 2'

    def gotResults_217(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Vocola2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_217(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 367, '\'vo cola 2\'', e)
            self.firstWord = -1

    # 'forward slash twenty 4'

    def gotResults_218(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/24'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_218(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 368, '\'forward slash twenty 4\'', e)
            self.firstWord = -1

    # 'code or'

    def gotResults_219(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'coder'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_219(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 369, '\'code or\'', e)
            self.firstWord = -1

    # 'voice code or'

    def gotResults_220(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'voice{space}coder'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_220(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 370, '\'voice code or\'', e)
            self.firstWord = -1

    # 'I C M P'

    def gotResults_221(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'icmp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_221(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 371, '\'I C M P\'', e)
            self.firstWord = -1

    # 'I CMP'

    def gotResults_222(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'icmp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_222(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 372, '\'I CMP\'', e)
            self.firstWord = -1

    # 'G711'

    def gotResults_223(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'g7ll'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_223(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 373, '\'G711\'', e)
            self.firstWord = -1

    # 'space'

    def gotResults_224(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_224(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 374, '\'space\'', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None

