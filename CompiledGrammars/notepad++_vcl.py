# Natlink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.6, Mon May 24 15:06:07 2021

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """

        <dgndictation> imported;
        <1> = 'two' ;
        <2> = 'to' ;
        <3> = 'three' ;
        <4> = 'four' ;
        <5> = 'five' ;
        <6> = 'six' ;
        <7> = 'seven' ;
        <8> = 'eight' ;
        <9> = 'nine' ;
        <key> = ('alpha' | 'bravo' | 'charlie' | 'delta' | 'echo' | 'foxtrot' | 'golf' | 'hotel' | 'india' | 'juliett' | 'kilo' | 'lima' | 'mike' | 'november' | 'oscar' | 'papa' | 'quebec' | 'romeo' | 'sierra' | 'tango' | 'uniform' | 'victor' | 'whiskey' | 'xray' | 'yankee' | 'zulu' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '!' | '@' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '`' | '~' | '-' | '_' | '=' | '+' | '\\' | '|' | '[' | '{' | ']' | '}' | ';' | ':' | "'" | '"' | ',' | '<' | '.' | '>' | '/' | '?' | 'Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'Escape' | 'Home' | 'End' ) ;
        <letterKey> = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' ;
        <militaryKey> = ('Alpha' | 'Bravo' | 'Charlie' | 'Delta' | 'Echo' | 'Foxtrot' | 'Golf' | 'Hotel' | 'India' | 'Juliet' | 'Kilo' | 'Lima' | 'Mike' | 'November' | 'Oscar' | 'Papa' | 'Quebec' | 'Romeo' | 'Sierra' | 'Tango' | 'Uniform' | 'Victor' | 'Whiskey' | 'Xray' | 'Yankee' | 'Zulu' ) ;
        <numberKey> = ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <functionKey> = 'F1' | 'F2' | 'F3' | 'F4' | 'F5' | 'F6' | 'F7' | 'F8' | 'F9' | 'F10' | 'F11' | 'F12' ;
        <unicodeKey> = 'Copyright' | 'Em Dash' ;
        <10> = 'Press' <key> ;
        <11> = 'Space Bar' ;
        <special> = ('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' | 'Home' | 'End' ) ;
        <mod> = 'Shift' | 'control' | 'Alt' | 'Win' ;
        <ndigit> = ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <12> = 'Press' <special> ;
        <13> = 'Press' <special> <ndigit> ;
        <14> = 'Press' <mod> <key> ;
        <15> = 'Press' <mod> <key> <ndigit> ;
        <16> = 'Press' <mod> <mod> <key> <ndigit> ;
        <17> = 'Press' <mod> <mod> <mod> <key> <ndigit> ;
        <capMilitaryKey> = ('Cap Alpha' | 'Cap Bravo' | 'Cap Charlie' | 'Cap Delta' | 'Cap Echo' | 'Cap Golf' | 'Cap Hotel' | 'Cap India' | 'Cap Juliet' | 'Cap Kilo' | 'Cap Mike' | 'Cap November' | 'Cap Oscar' | 'Cap Papa' | 'Cap Quebec' | 'Cap Sierra' | 'Cap Tango' | 'Cap Uniform' | 'Cap Victor' | 'Cap Whiskey' | 'Cap Xray' | 'Cap Yankee' | 'Cap Zulu' ) ;
        <symbolKey> = ('~' | '!' | '@' | '#' | '$' | '%' | '^' | '*' | '(' | ')' | '_' | '+' | '`' | '-' | '=' | '{' | '}' | '|' | '[' | ']' | '\\' | ':' | '"' | ';' | "'" | '<' | '>' | '?' | ',' | '.' | '/' ) ;
        <n> = ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99) ;
        <18> = 'identify command file' ;
        <19> = 'Var' ;
        <20> = 'bar' ;
        <21> = 'go to line' <21b> ;
        <21b> = <n> 'thousand' <n> 'hundred and' <n> ;
        <22> = 'go to line' <22b> ;
        <22b> = <n> 'hundred and' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <23> = 'go to line' <23b> ;
        <23b> = <n> 'hundred' <n> ;
        <24> = 'go to line' <24b> ;
        <24b> = <n> 'hundred' ;
        <25> = 'go to line' <n> ;
        <26> = 'Next File' ;
        <27> = 'next file' ;
        <28> = 'next tab' ;
        <29> = 'previous tab' ;
        <30> = 'previous file' ;
        <31> = 'Previous File' ;
        <32> = 'Move Tab Right' ;
        <33> = 'Move Tab Left' ;
        <34> = 'duplicate line' ;
        <35> = 'open folder' ;
        <36> = 'open containing folder' ;
        <37> = 'open containing folder' ;
        <38> = 'switch to other window' ;
        <39> = 'Close file' ;
        <40> = 'close file' ;
        <41> = 'save file as' ;
        <42> = 'previous tab test VCL' ;
        <43> = 'test BCL' ;
        <44> = 'Dollar' <n> ;
        <45> = 'Dollar if' ;
        <46> = 'control' ;
        <47> = 'Shift' ;
        <48> = 'Alt' ;
        <49> = 'insert' <dgndictation> ;
        <50> = 'test HTML' ;
        <51> = 'test PHP' ;
        <tag> = ('HTML' | 'body' | 'head' | 'a' | 'ah' | 'alpha' | 'b' | 'beta' | 'i' | 'you' | 'span' | 'div' | 'UL' | 'OL' | 'el eye' | 'li' | 'LI' | 'LI' | 'Ente Galli' | 'H1' | 'H2' | 'H3' | 'H4' | 'H5' | 'H6' | 'Table' | 'T R' | 'T H' | 'T D' | 'P' | 'P R E' | 'Script' | 'Strong' | 'Style' | 'T body' | 'T head' | 'Text area' | 'B R' | 'H R' | 'title' | 'Sub' | 'Soup' | 'Link' | 'select' ) ;
        <tag2> = ('H ref' | 'Call span' | 'sell padding' | 'sell spacing' | 'border' | 'style' | 'type' | 'Size' | 'Name' | 'Action' | 'Value' | 'ID' | 'Class' ) ;
        <52> = 'tag' <tag> ;
        <53> = 'tag' <tag> <tag2> ;
        <54> = 'tag' <tag> <tag2> <tag2> ;
        <55> = 'tag' <tag> <tag2> <tag2> <tag2> ;
        <56> = 'tag' <tag> <tag2> <tag2> <tag2> <tag2> ;
        <57> = 'end tag' <tag> ;
        <58> = 'attribute' <tag2> ;
        <59> = '& LT' ;
        <60> = '& GT' ;
        <superglobal> = ('GET' | 'POST' | 'COOKIE' | 'FILES' | 'SERVER' | 'ENV' | 'REQUEST' | 'SESSION' ) ;
        <61> = 'dollar underscore' <superglobal> ;
        <62> = 'dollar' <dgndictation> ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<8>|<9>|<10>|<11>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<30>|<31>|<32>|<33>|<34>|<35>|<36>|<37>|<38>|<39>|<40>|<41>;
        <sequence> exported = <any>;
        <any_set2> = <any>|<42>|<43>|<44>|<45>|<46>|<47>|<48>|<49>;
        <sequence_set2> exported = <any_set2>;
        <any_set3> = <any>|<50>|<51>|<52>|<53>|<54>|<55>|<56>|<57>|<58>|<59>|<60>|<61>|<62>;
        <sequence_set3> exported = <any_set3>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.rule_state = {}

    
    def activate_rule(self, rule, window, status):
        current = self.rule_state.get(rule)
        active = (current == window)
        if status == active: return
        if current:
            self.deactivate(rule)
            self.rule_state[rule] = None
        if status:
            try:
                self.activate(rule, window)
                self.rule_state[rule] = window
            except natlink.BadWindow:
                pass


    def gotBegin(self,moduleInfo):
        self.firstWord = 0
        # Return if wrong application
        window = matchWindow(moduleInfo,'notepad++','')
        if not window: return None
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        title = moduleInfo[1].lower()
        self.activate_rule('sequence', moduleInfo[2], True)
        status = (title.find('.vch') >= 0 or title.find('.vcl') >= 0)
        self.activate_rule('sequence_set2', moduleInfo[2], status)
        status = (title.find('{hello}\n\n.htm') >= 0 or title.find('.html') >= 0 or title.find('.php') >= 0)
        self.activate_rule('sequence_set3', moduleInfo[2], status)

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        else:
            return word

    # 'two'

    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_1(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 2, '\'two\'', e)
            self.firstWord = -1

    # 'to'

    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_2(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 3, '\'to\'', e)
            self.firstWord = -1

    # 'three'

    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '3'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 4, '\'three\'', e)
            self.firstWord = -1

    # 'four'

    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '4'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 5, '\'four\'', e)
            self.firstWord = -1

    # 'five'

    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '5'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_5(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 6, '\'five\'', e)
            self.firstWord = -1

    # 'six'

    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '6'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_6(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 7, '\'six\'', e)
            self.firstWord = -1

    # 'seven'

    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '7'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_7(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 8, '\'seven\'', e)
            self.firstWord = -1

    # 'eight'

    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '8'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_8(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 9, '\'eight\'', e)
            self.firstWord = -1

    # 'nine'

    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '9'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 10, '\'nine\'', e)
            self.firstWord = -1

    def get_key(self, list_buffer, functional, word):
        if word == 'alpha':
            list_buffer += 'a'
        elif word == 'bravo':
            list_buffer += 'b'
        elif word == 'charlie':
            list_buffer += 'c'
        elif word == 'delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'hotel':
            list_buffer += 'h'
        elif word == 'india':
            list_buffer += 'i'
        elif word == 'juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'lima':
            list_buffer += 'l'
        elif word == 'mike':
            list_buffer += 'm'
        elif word == 'november':
            list_buffer += 'n'
        elif word == 'oscar':
            list_buffer += 'o'
        elif word == 'papa':
            list_buffer += 'p'
        elif word == 'quebec':
            list_buffer += 'q'
        elif word == 'romeo':
            list_buffer += 'r'
        elif word == 'sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'xray':
            list_buffer += 'x'
        elif word == 'yankee':
            list_buffer += 'y'
        elif word == 'zulu':
            list_buffer += 'z'
        elif word == '0':
            list_buffer += '0'
        elif word == '1':
            list_buffer += '1'
        elif word == '2':
            list_buffer += '2'
        elif word == '3':
            list_buffer += '3'
        elif word == '4':
            list_buffer += '4'
        elif word == '5':
            list_buffer += '5'
        elif word == '6':
            list_buffer += '6'
        elif word == '7':
            list_buffer += '7'
        elif word == '8':
            list_buffer += '8'
        elif word == '9':
            list_buffer += '9'
        elif word == '!':
            list_buffer += '!'
        elif word == '@':
            list_buffer += '@'
        elif word == '$':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == '^':
            list_buffer += '^'
        elif word == '&':
            list_buffer += '&'
        elif word == '*':
            list_buffer += '*'
        elif word == '(':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == '`':
            list_buffer += '`'
        elif word == '~':
            list_buffer += '~'
        elif word == '-':
            list_buffer += '-'
        elif word == '_':
            list_buffer += '_'
        elif word == '=':
            list_buffer += '='
        elif word == '+':
            list_buffer += '+'
        elif word == '\\':
            list_buffer += '\\'
        elif word == '|':
            list_buffer += '|'
        elif word == '[':
            list_buffer += '['
        elif word == '{':
            list_buffer += '{'
        elif word == ']':
            list_buffer += ']'
        elif word == '}':
            list_buffer += '}'
        elif word == ';':
            list_buffer += ';'
        elif word == ':':
            list_buffer += ':'
        elif word == '\'':
            list_buffer += '\''
        elif word == '"':
            list_buffer += '"'
        elif word == ',':
            list_buffer += ','
        elif word == '<':
            list_buffer += '<'
        elif word == '.':
            list_buffer += '.'
        elif word == '>':
            list_buffer += '>'
        elif word == '/':
            list_buffer += '/'
        elif word == '?':
            list_buffer += '?'
        elif word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'Escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    def get_letterKey(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_militaryKey(self, list_buffer, functional, word):
        if word == 'Alpha':
            list_buffer += 'a'
        elif word == 'Bravo':
            list_buffer += 'b'
        elif word == 'Charlie':
            list_buffer += 'c'
        elif word == 'Delta':
            list_buffer += 'd'
        elif word == 'Echo':
            list_buffer += 'e'
        elif word == 'Foxtrot':
            list_buffer += 'f'
        elif word == 'Golf':
            list_buffer += 'g'
        elif word == 'Hotel':
            list_buffer += 'h'
        elif word == 'India':
            list_buffer += 'i'
        elif word == 'Juliet':
            list_buffer += 'j'
        elif word == 'Kilo':
            list_buffer += 'k'
        elif word == 'Lima':
            list_buffer += 'l'
        elif word == 'Mike':
            list_buffer += 'm'
        elif word == 'November':
            list_buffer += 'n'
        elif word == 'Oscar':
            list_buffer += 'o'
        elif word == 'Papa':
            list_buffer += 'p'
        elif word == 'Quebec':
            list_buffer += 'q'
        elif word == 'Romeo':
            list_buffer += 'r'
        elif word == 'Sierra':
            list_buffer += 's'
        elif word == 'Tango':
            list_buffer += 't'
        elif word == 'Uniform':
            list_buffer += 'u'
        elif word == 'Victor':
            list_buffer += 'v'
        elif word == 'Whiskey':
            list_buffer += 'w'
        elif word == 'Xray':
            list_buffer += 'x'
        elif word == 'Yankee':
            list_buffer += 'y'
        elif word == 'Zulu':
            list_buffer += 'z'
        return list_buffer

    def get_numberKey(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_functionKey(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_unicodeKey(self, list_buffer, functional, word):
        if word == 'Copyright':
            list_buffer += 'U+00A9'
        elif word == 'Em Dash':
            list_buffer += 'U+2014'
        return list_buffer

    # 'Press' <key>

    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('keys.vch', 38, '\'Press\' <key>', e)
            self.firstWord = -1

    # 'Space Bar'

    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_11(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 41, '\'Space Bar\'', e)
            self.firstWord = -1

    def get_special(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    def get_mod(self, list_buffer, functional, word):
        if word == 'Shift':
            list_buffer += 'Shift'
        elif word == 'control':
            list_buffer += 'Ctrl'
        elif word == 'Alt':
            list_buffer += 'Alt'
        elif word == 'Win':
            list_buffer += 'Win'
        return list_buffer

    def get_ndigit(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Press' <special>

    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_special(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('keys.vch', 55, '\'Press\' <special>', e)
            self.firstWord = -1

    # 'Press' <special> <ndigit>

    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_special(extension_arg1, True, word)
            extension_arg1 += '_'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_ndigit(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception as e:
            handle_error('keys.vch', 56, '\'Press\' <special> <ndigit>', e)
            self.firstWord = -1

    # 'Press' <mod> <key>

    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_key(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception as e:
            handle_error('keys.vch', 57, '\'Press\' <mod> <key>', e)
            self.firstWord = -1

    # 'Press' <mod> <key> <ndigit>

    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_key(extension_arg1, True, word)
            extension_arg1 += '_'
            word = fullResults[3 + self.firstWord][0]
            extension_arg1 = self.get_ndigit(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception as e:
            handle_error('keys.vch', 58, '\'Press\' <mod> <key> <ndigit>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <key> <ndigit>

    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[3 + self.firstWord][0]
            extension_arg1 = self.get_key(extension_arg1, True, word)
            extension_arg1 += '_'
            word = fullResults[4 + self.firstWord][0]
            extension_arg1 = self.get_ndigit(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception as e:
            handle_error('keys.vch', 59, '\'Press\' <mod> <mod> <key> <ndigit>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <mod> <key> <ndigit>

    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[3 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[4 + self.firstWord][0]
            extension_arg1 = self.get_key(extension_arg1, True, word)
            extension_arg1 += '_'
            word = fullResults[5 + self.firstWord][0]
            extension_arg1 = self.get_ndigit(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception as e:
            handle_error('keys.vch', 60, '\'Press\' <mod> <mod> <mod> <key> <ndigit>', e)
            self.firstWord = -1

    def get_capMilitaryKey(self, list_buffer, functional, word):
        if word == 'Cap Alpha':
            list_buffer += 'A'
        elif word == 'Cap Bravo':
            list_buffer += 'B'
        elif word == 'Cap Charlie':
            list_buffer += 'C'
        elif word == 'Cap Delta':
            list_buffer += 'D'
        elif word == 'Cap Echo':
            list_buffer += 'E'
        elif word == 'Cap Golf':
            list_buffer += 'G'
        elif word == 'Cap Hotel':
            list_buffer += 'H'
        elif word == 'Cap India':
            list_buffer += 'I'
        elif word == 'Cap Juliet':
            list_buffer += 'J'
        elif word == 'Cap Kilo':
            list_buffer += 'K'
        elif word == 'Cap Mike':
            list_buffer += 'M'
        elif word == 'Cap November':
            list_buffer += 'N'
        elif word == 'Cap Oscar':
            list_buffer += 'O'
        elif word == 'Cap Papa':
            list_buffer += 'P'
        elif word == 'Cap Quebec':
            list_buffer += 'Q'
        elif word == 'Cap Sierra':
            list_buffer += 'S'
        elif word == 'Cap Tango':
            list_buffer += 'T'
        elif word == 'Cap Uniform':
            list_buffer += 'U'
        elif word == 'Cap Victor':
            list_buffer += 'V'
        elif word == 'Cap Whiskey':
            list_buffer += 'W'
        elif word == 'Cap Xray':
            list_buffer += 'X'
        elif word == 'Cap Yankee':
            list_buffer += 'Y'
        elif word == 'Cap Zulu':
            list_buffer += 'Z'
        return list_buffer

    def get_symbolKey(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_n(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'identify command file'

    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'next'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'in notepad++.vcl'
            import vocola_ext_vocola
            vocola_ext_vocola.vocola_print(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_18(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 7, '\'identify command file\'', e)
            self.firstWord = -1

    # 'Var'

    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'var'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_19(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 8, '\'Var\'', e)
            self.firstWord = -1

    # 'bar'

    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'var'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 9, '\'bar\'', e)
            self.firstWord = -1

    # 'go to line' <n> 'thousand' <n> 'hundred and' <n>

    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Ctrl+g}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}{'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}{'
            word = fullResults[5 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception as e:
            handle_error('notepad++.vcl', 15, '\'go to line\' <n> \'thousand\' <n> \'hundred and\' <n>', e)
            self.firstWord = -1

    # 'go to line' <n> 'hundred and' 1..9

    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Ctrl+g}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}0{'
            word = fullResults[3 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception as e:
            handle_error('notepad++.vcl', 16, '\'go to line\' <n> \'hundred and\' 1..9', e)
            self.firstWord = -1

    # 'go to line' <n> 'hundred' <n>

    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Ctrl+g}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}0{'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception as e:
            handle_error('notepad++.vcl', 17, '\'go to line\' <n> \'hundred\' <n>', e)
            self.firstWord = -1

    # 'go to line' <n> 'hundred'

    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Ctrl+g}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}00{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception as e:
            handle_error('notepad++.vcl', 18, '\'go to line\' <n> \'hundred\'', e)
            self.firstWord = -1

    # 'go to line' <n>

    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Ctrl+g}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('notepad++.vcl', 19, '\'go to line\' <n>', e)
            self.firstWord = -1

    # 'Next File'

    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+PgDn}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_26(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 25, '\'Next File\'', e)
            self.firstWord = -1

    # 'next file'

    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+PgDn}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_27(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 26, '\'next file\'', e)
            self.firstWord = -1

    # 'next tab'

    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Load'
            dragon_arg1 += 'all'
            dragon_arg1 += 'commands'
            saved_firstWord = self.firstWord
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Ctrl+PgDn}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 27, '\'next tab\'', e)
            self.firstWord = -1

    # 'previous tab'

    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+PgUp}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_29(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 29, '\'previous tab\'', e)
            self.firstWord = -1

    # 'previous file'

    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+PgUp}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_30(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 30, '\'previous file\'', e)
            self.firstWord = -1

    # 'Previous File'

    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+PgUp}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_31(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 31, '\'Previous File\'', e)
            self.firstWord = -1

    # 'Move Tab Right'

    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Ctrl+Shift+PgDn}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_32(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 33, '\'Move Tab Right\'', e)
            self.firstWord = -1

    # 'Move Tab Left'

    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Ctrl+Shift+PgUp}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_33(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 34, '\'Move Tab Left\'', e)
            self.firstWord = -1

    # 'duplicate line'

    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_34(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 42, '\'duplicate line\'', e)
            self.firstWord = -1

    # 'open folder'

    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}{Down_2}{Right_1}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_35(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 44, '\'open folder\'', e)
            self.firstWord = -1

    # 'open containing folder'

    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}{Down_2}{Right_1}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_36(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 45, '\'open containing folder\'', e)
            self.firstWord = -1

    # 'open containing folder'

    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}{Down_2}{Right_1}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_37(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 46, '\'open containing folder\'', e)
            self.firstWord = -1

    # 'switch to other window'

    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F8}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_38(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 47, '\'switch to other window\'', e)
            self.firstWord = -1

    # 'Close file'

    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Ctrl+w}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_39(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 48, '\'Close file\'', e)
            self.firstWord = -1

    # 'close file'

    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{Ctrl+w}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_40(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 49, '\'close file\'', e)
            self.firstWord = -1

    # 'save file as'

    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Alt+S}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_41(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 50, '\'save file as\'', e)
            self.firstWord = -1

    # 'previous tab test VCL'

    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'vcl here'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_42(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 56, '\'previous tab test VCL\'', e)
            self.firstWord = -1

    # 'test BCL'

    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'vcl here'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_43(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 57, '\'test BCL\'', e)
            self.firstWord = -1

    # 'Dollar' <n>

    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '$'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('notepad++.vcl', 58, '\'Dollar\' <n>', e)
            self.firstWord = -1

    # 'Dollar if'

    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '"{Backspace}$if"{Backspace}'
            top_buffer += '{Enter}{Enter}'
            top_buffer += '"{Backspace}$end"{Backspace}'
            top_buffer += '{Up_2}{End}{Space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_45(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 59, '\'Dollar if\'', e)
            self.firstWord = -1

    # 'control'

    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Ctrl'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_46(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 60, '\'control\'', e)
            self.firstWord = -1

    # 'Shift'

    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Shift'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_47(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 61, '\'Shift\'', e)
            self.firstWord = -1

    # 'Alt'

    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'Alt'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_48(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 62, '\'Alt\'', e)
            self.firstWord = -1

    # 'insert' <_anything>

    def gotResults_49(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('notepad++.vcl', 63, '\'insert\' <_anything>', e)
            self.firstWord = -1

    # 'test HTML'

    def gotResults_50(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'in HTML'
            import vocola_ext_vocola
            vocola_ext_vocola.vocola_print(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_50(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 68, '\'test HTML\'', e)
            self.firstWord = -1

    # 'test PHP'

    def gotResults_51(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'in PHP'
            import vocola_ext_vocola
            vocola_ext_vocola.vocola_print(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_51(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 69, '\'test PHP\'', e)
            self.firstWord = -1

    def get_tag(self, list_buffer, functional, word):
        if word == 'HTML':
            list_buffer += 'html'
        elif word == 'body':
            list_buffer += 'body'
        elif word == 'head':
            list_buffer += 'head'
        elif word == 'a':
            list_buffer += 'a'
        elif word == 'ah':
            list_buffer += 'a'
        elif word == 'alpha':
            list_buffer += 'a'
        elif word == 'b':
            list_buffer += 'b'
        elif word == 'beta':
            list_buffer += 'b'
        elif word == 'i':
            list_buffer += 'i'
        elif word == 'you':
            list_buffer += 'u'
        elif word == 'span':
            list_buffer += 'span'
        elif word == 'div':
            list_buffer += 'div'
        elif word == 'UL':
            list_buffer += 'ul'
        elif word == 'OL':
            list_buffer += 'ol'
        elif word == 'el eye':
            list_buffer += 'li'
        elif word == 'li':
            list_buffer += 'li'
        elif word == 'LI':
            list_buffer += 'li'
        elif word == 'LI':
            list_buffer += 'li'
        elif word == 'Ente Galli':
            list_buffer += 'li'
        elif word == 'H1':
            list_buffer += 'h1'
        elif word == 'H2':
            list_buffer += 'h2'
        elif word == 'H3':
            list_buffer += 'h3'
        elif word == 'H4':
            list_buffer += 'h4'
        elif word == 'H5':
            list_buffer += 'h5'
        elif word == 'H6':
            list_buffer += 'h6'
        elif word == 'Table':
            list_buffer += 'table'
        elif word == 'T R':
            list_buffer += 'tr'
        elif word == 'T H':
            list_buffer += 'th'
        elif word == 'T D':
            list_buffer += 'td'
        elif word == 'P':
            list_buffer += 'p'
        elif word == 'P R E':
            list_buffer += 'pre'
        elif word == 'Script':
            list_buffer += 'script'
        elif word == 'Strong':
            list_buffer += 'strong'
        elif word == 'Style':
            list_buffer += 'style'
        elif word == 'T body':
            list_buffer += 'tbody'
        elif word == 'T head':
            list_buffer += 'thead'
        elif word == 'Text area':
            list_buffer += 'textarea'
        elif word == 'B R':
            list_buffer += 'br /'
        elif word == 'H R':
            list_buffer += 'hr'
        elif word == 'title':
            list_buffer += 'title'
        elif word == 'Sub':
            list_buffer += 'sub'
        elif word == 'Soup':
            list_buffer += 'sup'
        elif word == 'Link':
            list_buffer += 'link rel="stylesheet" type="text/css" href="../csswork/default.css"'
        elif word == 'select':
            list_buffer += 'select'
        return list_buffer

    def get_tag2(self, list_buffer, functional, word):
        if word == 'H ref':
            list_buffer += 'href'
        elif word == 'Call span':
            list_buffer += 'colspan'
        elif word == 'sell padding':
            list_buffer += 'cellpadding'
        elif word == 'sell spacing':
            list_buffer += 'cellspacing'
        elif word == 'border':
            list_buffer += 'border'
        elif word == 'style':
            list_buffer += 'style'
        elif word == 'type':
            list_buffer += 'type'
        elif word == 'Size':
            list_buffer += 'size'
        elif word == 'Name':
            list_buffer += 'name'
        elif word == 'Action':
            list_buffer += 'action'
        elif word == 'Value':
            list_buffer += 'value'
        elif word == 'ID':
            list_buffer += 'id'
        elif word == 'Class':
            list_buffer += 'class'
        return list_buffer

    # 'tag' <tag>

    def gotResults_52(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '<'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_tag(top_buffer, False, word)
            top_buffer += '>'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('notepad++.vcl', 129, '\'tag\' <tag>', e)
            self.firstWord = -1

    # 'tag' <tag> <tag2>

    def gotResults_53(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '<'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_tag(top_buffer, False, word)
            top_buffer += ' '
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_tag2(top_buffer, False, word)
            top_buffer += '=>'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception as e:
            handle_error('notepad++.vcl', 130, '\'tag\' <tag> <tag2>', e)
            self.firstWord = -1

    # 'tag' <tag> <tag2> <tag2>

    def gotResults_54(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '<'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_tag(top_buffer, False, word)
            top_buffer += ' '
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_tag2(top_buffer, False, word)
            top_buffer += '= '
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_tag2(top_buffer, False, word)
            top_buffer += '=>'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception as e:
            handle_error('notepad++.vcl', 131, '\'tag\' <tag> <tag2> <tag2>', e)
            self.firstWord = -1

    # 'tag' <tag> <tag2> <tag2> <tag2>

    def gotResults_55(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '<'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_tag(top_buffer, False, word)
            top_buffer += ' '
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_tag2(top_buffer, False, word)
            top_buffer += '= '
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_tag2(top_buffer, False, word)
            top_buffer += '= '
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_tag2(top_buffer, False, word)
            top_buffer += '=>'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception as e:
            handle_error('notepad++.vcl', 132, '\'tag\' <tag> <tag2> <tag2> <tag2>', e)
            self.firstWord = -1

    # 'tag' <tag> <tag2> <tag2> <tag2> <tag2>

    def gotResults_56(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '<'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_tag(top_buffer, False, word)
            top_buffer += ' '
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_tag2(top_buffer, False, word)
            top_buffer += '= '
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_tag2(top_buffer, False, word)
            top_buffer += '= '
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_tag2(top_buffer, False, word)
            top_buffer += '= '
            word = fullResults[5 + self.firstWord][0]
            top_buffer = self.get_tag2(top_buffer, False, word)
            top_buffer += '=>'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception as e:
            handle_error('notepad++.vcl', 133, '\'tag\' <tag> <tag2> <tag2> <tag2> <tag2>', e)
            self.firstWord = -1

    # 'end tag' <tag>

    def gotResults_57(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '</'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_tag(top_buffer, False, word)
            top_buffer += '>'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('notepad++.vcl', 134, '\'end tag\' <tag>', e)
            self.firstWord = -1

    # 'attribute' <tag2>

    def gotResults_58(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_tag2(top_buffer, False, word)
            top_buffer += '='
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('notepad++.vcl', 135, '\'attribute\' <tag2>', e)
            self.firstWord = -1

    # '& LT'

    def gotResults_59(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '&lt;'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_59(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 136, '\'& LT\'', e)
            self.firstWord = -1

    # '& GT'

    def gotResults_60(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '&gt;'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_60(words[1:], fullResults)
        except Exception as e:
            handle_error('notepad++.vcl', 137, '\'& GT\'', e)
            self.firstWord = -1

    def get_superglobal(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    # 'dollar underscore' <superglobal>

    def gotResults_61(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '$_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_superglobal(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('notepad++.vcl', 139, '\'dollar underscore\' <superglobal>', e)
            self.firstWord = -1

    # 'dollar' <_anything>

    def gotResults_62(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '$'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('notepad++.vcl', 140, '\'dollar\' <_anything>', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None

