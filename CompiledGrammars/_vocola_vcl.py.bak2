# Natlink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.6, Wed May 12 17:23:21 2021

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """

        <dgndictation> imported;
        <1> = 'two' ;
        <2> = 'to' ;
        <3> = 'three' ;
        <4> = 'four' ;
        <5> = 'five' ;
        <6> = 'six' ;
        <7> = 'seven' ;
        <8> = 'eight' ;
        <9> = 'nine' ;
        <key> = ('alpha' | 'bravo' | 'charlie' | 'delta' | 'echo' | 'foxtrot' | 'golf' | 'hotel' | 'india' | 'juliett' | 'kilo' | 'lima' | 'mike' | 'november' | 'oscar' | 'papa' | 'quebec' | 'romeo' | 'sierra' | 'tango' | 'uniform' | 'victor' | 'whiskey' | 'xray' | 'yankee' | 'zulu' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '!' | '@' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '`' | '~' | '-' | '_' | '=' | '+' | '\\' | '|' | '[' | '{' | ']' | '}' | ';' | ':' | "'" | '"' | ',' | '<' | '.' | '>' | '/' | '?' | 'Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'Escape' | 'Home' | 'End' ) ;
        <letterKey> = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' ;
        <militaryKey> = ('Alpha' | 'Bravo' | 'Charlie' | 'Delta' | 'Echo' | 'Foxtrot' | 'Golf' | 'Hotel' | 'India' | 'Juliet' | 'Kilo' | 'Lima' | 'Mike' | 'November' | 'Oscar' | 'Papa' | 'Quebec' | 'Romeo' | 'Sierra' | 'Tango' | 'Uniform' | 'Victor' | 'Whiskey' | 'Xray' | 'Yankee' | 'Zulu' ) ;
        <numberKey> = ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <functionKey> = 'F1' | 'F2' | 'F3' | 'F4' | 'F5' | 'F6' | 'F7' | 'F8' | 'F9' | 'F10' | 'F11' | 'F12' ;
        <unicodeKey> = 'Copyright' | 'Em Dash' ;
        <10> = 'Press' <key> ;
        <11> = 'Space Bar' ;
        <special> = ('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' | 'Home' | 'End' ) ;
        <mod> = 'Shift' | 'control' | 'Alt' | 'Win' ;
        <ndigit> = ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <12> = 'Press' <special> ;
        <13> = 'Press' <special> <ndigit> ;
        <14> = 'Press' <mod> <key> ;
        <15> = 'Press' <mod> <key> <ndigit> ;
        <16> = 'Press' <mod> <mod> <key> <ndigit> ;
        <17> = 'Press' <mod> <mod> <mod> <key> <ndigit> ;
        <capMilitaryKey> = ('Cap Alpha' | 'Cap Bravo' | 'Cap Charlie' | 'Cap Delta' | 'Cap Echo' | 'Cap Golf' | 'Cap Hotel' | 'Cap India' | 'Cap Juliet' | 'Cap Kilo' | 'Cap Mike' | 'Cap November' | 'Cap Oscar' | 'Cap Papa' | 'Cap Quebec' | 'Cap Sierra' | 'Cap Tango' | 'Cap Uniform' | 'Cap Victor' | 'Cap Whiskey' | 'Cap Xray' | 'Cap Yankee' | 'Cap Zulu' ) ;
        <symbolKey> = ('~' | '!' | '@' | '#' | '$' | '%' | '^' | '*' | '(' | ')' | '_' | '+' | '`' | '-' | '=' | '{' | '}' | '|' | '[' | ']' | '\\' | ':' | '"' | ';' | "'" | '<' | '>' | '?' | ',' | '.' | '/' ) ;
        <18> = 'test box' ;
        <19> = 'test voice' ;
        <20> = 'Cheryl is' ;
        <21> = 'save file' ;
        <22> = 'safe file' ;
        <23> = 'new file' ;
        <24> = 'open file' ;
        <25> = 'close file' ;
        <26> = 'select all' ;
        <27> = 'undo that' ;
        <28> = 'copy that' ;
        <29> = 'paste that' ;
        <30> = 'cut that' ;
        <31> = 'print that' ;
        <32> = 'find' <dgndictation> ;
        <33> = 'Vocola line' ;
        <direction> = '{ Left' | 'Right' | 'Up' | 'Down }' ;
        <up_down> = '{ Back' | 'Forward' | 'Up' | 'Down }' ;
        <left_right> = '{ Left' | 'Right }' ;
        <start_end> = '{ Beginning' | 'Start' | 'End' ;
        <to_start_end> = '{ Beginning' | 'Start' | 'End' ;
        <34> = 'crazy 1 up' ;
        <35> = 'crazy 1 down' ;
        <36> = 'crazy 1 right' ;
        <37> = 'crazy 1 left' ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<8>|<9>|<10>|<11>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<30>|<31>|<32>|<33>|<34>|<35>|<36>|<37>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.rule_state = {}

        self.activate('sequence')
    
    def activate_rule(self, rule, window, status):
        current = self.rule_state.get(rule)
        active = (current == window)
        if status == active: return
        if current:
            self.deactivate(rule)
            self.rule_state[rule] = None
        if status:
            try:
                self.activate(rule, window)
                self.rule_state[rule] = window
            except natlink.BadWindow:
                pass


    def gotBegin(self,moduleInfo):
        self.firstWord = 0
        window = moduleInfo[2]
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        title = moduleInfo[1].lower()

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        else:
            return word

    # 'two'

    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_1(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 2, '\'two\'', e)
            self.firstWord = -1

    # 'to'

    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '2'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_2(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 3, '\'to\'', e)
            self.firstWord = -1

    # 'three'

    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '3'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 4, '\'three\'', e)
            self.firstWord = -1

    # 'four'

    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '4'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 5, '\'four\'', e)
            self.firstWord = -1

    # 'five'

    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '5'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_5(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 6, '\'five\'', e)
            self.firstWord = -1

    # 'six'

    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '6'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_6(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 7, '\'six\'', e)
            self.firstWord = -1

    # 'seven'

    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '7'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_7(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 8, '\'seven\'', e)
            self.firstWord = -1

    # 'eight'

    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '8'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_8(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 9, '\'eight\'', e)
            self.firstWord = -1

    # 'nine'

    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '9'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 10, '\'nine\'', e)
            self.firstWord = -1

    def get_key(self, list_buffer, functional, word):
        if word == 'alpha':
            list_buffer += 'a'
        elif word == 'bravo':
            list_buffer += 'b'
        elif word == 'charlie':
            list_buffer += 'c'
        elif word == 'delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'hotel':
            list_buffer += 'h'
        elif word == 'india':
            list_buffer += 'i'
        elif word == 'juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'lima':
            list_buffer += 'l'
        elif word == 'mike':
            list_buffer += 'm'
        elif word == 'november':
            list_buffer += 'n'
        elif word == 'oscar':
            list_buffer += 'o'
        elif word == 'papa':
            list_buffer += 'p'
        elif word == 'quebec':
            list_buffer += 'q'
        elif word == 'romeo':
            list_buffer += 'r'
        elif word == 'sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'xray':
            list_buffer += 'x'
        elif word == 'yankee':
            list_buffer += 'y'
        elif word == 'zulu':
            list_buffer += 'z'
        elif word == '0':
            list_buffer += '0'
        elif word == '1':
            list_buffer += '1'
        elif word == '2':
            list_buffer += '2'
        elif word == '3':
            list_buffer += '3'
        elif word == '4':
            list_buffer += '4'
        elif word == '5':
            list_buffer += '5'
        elif word == '6':
            list_buffer += '6'
        elif word == '7':
            list_buffer += '7'
        elif word == '8':
            list_buffer += '8'
        elif word == '9':
            list_buffer += '9'
        elif word == '!':
            list_buffer += '!'
        elif word == '@':
            list_buffer += '@'
        elif word == '$':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == '^':
            list_buffer += '^'
        elif word == '&':
            list_buffer += '&'
        elif word == '*':
            list_buffer += '*'
        elif word == '(':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == '`':
            list_buffer += '`'
        elif word == '~':
            list_buffer += '~'
        elif word == '-':
            list_buffer += '-'
        elif word == '_':
            list_buffer += '_'
        elif word == '=':
            list_buffer += '='
        elif word == '+':
            list_buffer += '+'
        elif word == '\\':
            list_buffer += '\\'
        elif word == '|':
            list_buffer += '|'
        elif word == '[':
            list_buffer += '['
        elif word == '{':
            list_buffer += '{'
        elif word == ']':
            list_buffer += ']'
        elif word == '}':
            list_buffer += '}'
        elif word == ';':
            list_buffer += ';'
        elif word == ':':
            list_buffer += ':'
        elif word == '\'':
            list_buffer += '\''
        elif word == '"':
            list_buffer += '"'
        elif word == ',':
            list_buffer += ','
        elif word == '<':
            list_buffer += '<'
        elif word == '.':
            list_buffer += '.'
        elif word == '>':
            list_buffer += '>'
        elif word == '/':
            list_buffer += '/'
        elif word == '?':
            list_buffer += '?'
        elif word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'Escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    def get_letterKey(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_militaryKey(self, list_buffer, functional, word):
        if word == 'Alpha':
            list_buffer += 'a'
        elif word == 'Bravo':
            list_buffer += 'b'
        elif word == 'Charlie':
            list_buffer += 'c'
        elif word == 'Delta':
            list_buffer += 'd'
        elif word == 'Echo':
            list_buffer += 'e'
        elif word == 'Foxtrot':
            list_buffer += 'f'
        elif word == 'Golf':
            list_buffer += 'g'
        elif word == 'Hotel':
            list_buffer += 'h'
        elif word == 'India':
            list_buffer += 'i'
        elif word == 'Juliet':
            list_buffer += 'j'
        elif word == 'Kilo':
            list_buffer += 'k'
        elif word == 'Lima':
            list_buffer += 'l'
        elif word == 'Mike':
            list_buffer += 'm'
        elif word == 'November':
            list_buffer += 'n'
        elif word == 'Oscar':
            list_buffer += 'o'
        elif word == 'Papa':
            list_buffer += 'p'
        elif word == 'Quebec':
            list_buffer += 'q'
        elif word == 'Romeo':
            list_buffer += 'r'
        elif word == 'Sierra':
            list_buffer += 's'
        elif word == 'Tango':
            list_buffer += 't'
        elif word == 'Uniform':
            list_buffer += 'u'
        elif word == 'Victor':
            list_buffer += 'v'
        elif word == 'Whiskey':
            list_buffer += 'w'
        elif word == 'Xray':
            list_buffer += 'x'
        elif word == 'Yankee':
            list_buffer += 'y'
        elif word == 'Zulu':
            list_buffer += 'z'
        return list_buffer

    def get_numberKey(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_functionKey(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_unicodeKey(self, list_buffer, functional, word):
        if word == 'Copyright':
            list_buffer += 'U+00A9'
        elif word == 'Em Dash':
            list_buffer += 'U+2014'
        return list_buffer

    # 'Press' <key>

    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('keys.vch', 38, '\'Press\' <key>', e)
            self.firstWord = -1

    # 'Space Bar'

    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_11(words[1:], fullResults)
        except Exception as e:
            handle_error('keys.vch', 41, '\'Space Bar\'', e)
            self.firstWord = -1

    def get_special(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    def get_mod(self, list_buffer, functional, word):
        if word == 'Shift':
            list_buffer += 'Shift'
        elif word == 'control':
            list_buffer += 'Ctrl'
        elif word == 'Alt':
            list_buffer += 'Alt'
        elif word == 'Win':
            list_buffer += 'Win'
        return list_buffer

    def get_ndigit(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Press' <special>

    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_special(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('keys.vch', 55, '\'Press\' <special>', e)
            self.firstWord = -1

    # 'Press' <special> <ndigit>

    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_special(extension_arg1, True, word)
            extension_arg1 += '_'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_ndigit(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception as e:
            handle_error('keys.vch', 56, '\'Press\' <special> <ndigit>', e)
            self.firstWord = -1

    # 'Press' <mod> <key>

    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_key(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception as e:
            handle_error('keys.vch', 57, '\'Press\' <mod> <key>', e)
            self.firstWord = -1

    # 'Press' <mod> <key> <ndigit>

    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_key(extension_arg1, True, word)
            extension_arg1 += '_'
            word = fullResults[3 + self.firstWord][0]
            extension_arg1 = self.get_ndigit(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception as e:
            handle_error('keys.vch', 58, '\'Press\' <mod> <key> <ndigit>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <key> <ndigit>

    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[3 + self.firstWord][0]
            extension_arg1 = self.get_key(extension_arg1, True, word)
            extension_arg1 += '_'
            word = fullResults[4 + self.firstWord][0]
            extension_arg1 = self.get_ndigit(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception as e:
            handle_error('keys.vch', 59, '\'Press\' <mod> <mod> <key> <ndigit>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <mod> <key> <ndigit>

    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[2 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[3 + self.firstWord][0]
            extension_arg1 = self.get_mod(extension_arg1, True, word)
            extension_arg1 += '+'
            word = fullResults[4 + self.firstWord][0]
            extension_arg1 = self.get_key(extension_arg1, True, word)
            extension_arg1 += '_'
            word = fullResults[5 + self.firstWord][0]
            extension_arg1 = self.get_ndigit(extension_arg1, True, word)
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception as e:
            handle_error('keys.vch', 60, '\'Press\' <mod> <mod> <mod> <key> <ndigit>', e)
            self.firstWord = -1

    def get_capMilitaryKey(self, list_buffer, functional, word):
        if word == 'Cap Alpha':
            list_buffer += 'A'
        elif word == 'Cap Bravo':
            list_buffer += 'B'
        elif word == 'Cap Charlie':
            list_buffer += 'C'
        elif word == 'Cap Delta':
            list_buffer += 'D'
        elif word == 'Cap Echo':
            list_buffer += 'E'
        elif word == 'Cap Golf':
            list_buffer += 'G'
        elif word == 'Cap Hotel':
            list_buffer += 'H'
        elif word == 'Cap India':
            list_buffer += 'I'
        elif word == 'Cap Juliet':
            list_buffer += 'J'
        elif word == 'Cap Kilo':
            list_buffer += 'K'
        elif word == 'Cap Mike':
            list_buffer += 'M'
        elif word == 'Cap November':
            list_buffer += 'N'
        elif word == 'Cap Oscar':
            list_buffer += 'O'
        elif word == 'Cap Papa':
            list_buffer += 'P'
        elif word == 'Cap Quebec':
            list_buffer += 'Q'
        elif word == 'Cap Sierra':
            list_buffer += 'S'
        elif word == 'Cap Tango':
            list_buffer += 'T'
        elif word == 'Cap Uniform':
            list_buffer += 'U'
        elif word == 'Cap Victor':
            list_buffer += 'V'
        elif word == 'Cap Whiskey':
            list_buffer += 'W'
        elif word == 'Cap Xray':
            list_buffer += 'X'
        elif word == 'Cap Yankee':
            list_buffer += 'Y'
        elif word == 'Cap Zulu':
            list_buffer += 'Z'
        return list_buffer

    def get_symbolKey(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    # 'test box'

    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Testing'
            dragon_arg2 = ''
            dragon_arg2 += '65'
            dragon_arg3 = ''
            dragon_arg3 += 'Test Window'
            saved_firstWord = self.firstWord
            call_Dragon('MsgBoxConfirm', 'sis', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_18(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 11, '\'test box\'', e)
            self.firstWord = -1

    # 'test voice'

    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Welcome to the jungle'
            saved_firstWord = self.firstWord
            call_Dragon('TTSPlayString', 'ss', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_19(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 12, '\'test voice\'', e)
            self.firstWord = -1

    # 'Cheryl is'

    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'cool'
            saved_firstWord = self.firstWord
            call_Dragon('TTSPlayString', 'ss', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 13, '\'Cheryl is\'', e)
            self.firstWord = -1

    # 'save file'

    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+s}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_21(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 16, '\'save file\'', e)
            self.firstWord = -1

    # 'safe file'

    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+s}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_22(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 17, '\'safe file\'', e)
            self.firstWord = -1

    # 'new file'

    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_23(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 18, '\'new file\'', e)
            self.firstWord = -1

    # 'open file'

    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}'
            top_buffer += 'o'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_24(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 19, '\'open file\'', e)
            self.firstWord = -1

    # 'close file'

    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_25(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 20, '\'close file\'', e)
            self.firstWord = -1

    # 'select all'

    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_26(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 21, '\'select all\'', e)
            self.firstWord = -1

    # 'undo that'

    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+z}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_27(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 22, '\'undo that\'', e)
            self.firstWord = -1

    # 'copy that'

    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 23, '\'copy that\'', e)
            self.firstWord = -1

    # 'paste that'

    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_29(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 24, '\'paste that\'', e)
            self.firstWord = -1

    # 'cut that'

    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+x}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_30(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 25, '\'cut that\'', e)
            self.firstWord = -1

    # 'print that'

    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+p}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_31(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 26, '\'print that\'', e)
            self.firstWord = -1

    # 'find' <_anything>

    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+f}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception as e:
            handle_error('_vocola.vcl', 28, '\'find\' <_anything>', e)
            self.firstWord = -1

    # 'Vocola line'

    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '----------------'
            import vocola_ext_vocola
            vocola_ext_vocola.vocola_print(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_33(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 29, '\'Vocola line\'', e)
            self.firstWord = -1

    def get_direction(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_up_down(self, list_buffer, functional, word):
        if word == '{ Back':
            list_buffer += 'Up'
        elif word == 'Forward':
            list_buffer += 'Down'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down }':
            list_buffer += 'Down }'
        return list_buffer

    def get_left_right(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_start_end(self, list_buffer, functional, word):
        if word == '{ Beginning':
            list_buffer += '{Home}'
        elif word == 'Start':
            list_buffer += '{Home}'
        elif word == 'End':
            list_buffer += '{End}'
            list_buffer += '}'
        return list_buffer

    def get_to_start_end(self, list_buffer, functional, word):
        if word == '{ Beginning':
            list_buffer += 'Home'
        elif word == 'Start':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
            list_buffer += '}'
        return list_buffer

    # 'crazy 1 up'

    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{up_1}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_34(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 43, '\'crazy 1 up\'', e)
            self.firstWord = -1

    # 'crazy 1 down'

    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{down_1}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_35(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 44, '\'crazy 1 down\'', e)
            self.firstWord = -1

    # 'crazy 1 right'

    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{right_1}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_36(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 45, '\'crazy 1 right\'', e)
            self.firstWord = -1

    # 'crazy 1 left'

    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{left_1}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_37(words[1:], fullResults)
        except Exception as e:
            handle_error('_vocola.vcl', 46, '\'crazy 1 left\'', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None

