# Voice commands for programming editor `

include keys.vch;
include printables.vch;

fix leading char = {home} {del};
<n> := 0..100;
<direction>  := Left | Right | Up | Down;
<left_right> := Left | Right;
<start_end>  := Start={Home} | End={End};

lower leading char = {ctrl+home} {shift+right};

################# from here to count down below, this was copied from http://vocola.net/unofficial/commands_for_Win32Pad.html
<modifiers> := (
       shift           = shift+
     | control         = ctrl+
     | control shift   = ctrl+shift+
     | shift   control = ctrl+shift+
);

  # chords for which repetition doesn't make sense:
<unrepeatable_chord> := (
     # "end" misrecognized too frequently so use first/last instead:
       (first      |start-of-line) = home
     | (last       |end-of-line)   = end

     | (top-of-file|top-of-buffer) = ctrl+home
     | (end-of-file|end-of-buffer) = ctrl+end
);
            <unrepeatable_chord> = {  $1};
<modifiers> <unrepeatable_chord> = {$1$2};

<chord> := (
        # moving by single characters:
       soar = up          # "up" by itself sounds too much like noise
     | down | left | right

        # erasing by single characters:
     | back = backspace | erase = del

     | tab     # moving by fields (add shift for move back a field)
     | space   # moving by screenfuls
     | enter   # special case (e.g., pagers)

        # moving by screenfuls:
     | page up = PgUp | page down = PgDn

        # moving by words:
     | flee = ctrl+left | start-word = ctrl+right
);
            <chord>        = {  $1   };
            <chord> 1..100 = {  $1_$2};
<modifiers> <chord>        = {$1$2   };
<modifiers> <chord> 1..100 = {$1$2_$3};

##
## Simple cutting and copying actions:
##
#already in global vcl file
#(copy  that | copy region)    = {ctrl+c};
#(cut   that | destroy region) = {ctrl+x};
#(paste that | yank)           = {ctrl+v};

<kill_word> := ( kill = ctrl+shift+left | pull-word = ctrl+shift+right );

<kill_word>        = {$1   }{ctrl+x};
<kill_word> 1..100 = {$1_$2}{ctrl+x};


<directshun> := ( start = {shift+home} | end = {shift+end} | and = {shift+end} |rest = {shift+end}{shift+left} );

copy      start       = {shift+home}            {ctrl+c} {right};
copy      rest        = {shift+end}{shift+left} {ctrl+c} {left};

crazy highlight <directshun> = $1;
grab line <directshun> = $1;
destroy   <directshun> = $1 {ctrl+x};

##
## Navigating by line numbers:
##

#LineMod(n) := {ctrl+g}$n{enter};

#(go | row | line) <nn> = LineMod($2);  # moves to the start of the given line

##
## Moving by occurrences of text:
##

_Leap(fwdbkwd, set_target, times) :=
        Keys.SendInput({shift+right})          # fake selecting our target at point
        Keys.SendInput({ctrl+f})               # bring up find dialog box
        Keys.SendInput({alt+c}- {alt+w}-)         # options: not whole words, case insensitive
        Keys.SendInput({alt+e}) $fwdbkwd          # set direction to find
        Keys.SendInput({alt+f}) "$set_target"       # set target for find
        Repeat($times,
          {enter}                 # do a find (may produce an error dialog box)
          {alt+w}{space}{alt+w}- # dismiss error dialog box if any
        )
        Wait(100) Keys.SendInput({esc})                     # dismiss find dialog box
        Keys.SendInput({left})                 # exit selection, leaving point at start of
        ;                         #   target or original if target not 
#---
# leap paren 
# line start
# leap after paren
# line start
# jump to test
# line start
# jump to after test
# Jot to after test
test leap = "in devedit";
test sleep = "in devedit";
#leap paren
#leap after paren
#leap right paren
#line end
#retreat paren
#line end
#jump back to paren
#---

####
# USE 'LEAP' (searching forward) and 
#'LEAP AFTER' (searching forward, leave cursor after symbol), and 'LEAP SECOND PAREN' FOR SYMBOLS
# USE 'JUMP TO' and 'JUMP BACK TO' for words
<leap>  := ( leap = "-" | jump to = "-" | jump back to = "+" | retreat = "+" );
<count> := ( first = 1 | second = 2 | third = 3 | fourth = 4 );
# ((a1 + b3) / c4) * d6) 

<leap>               <printable> = _Leap($1, $2, 1 );
<leap> after         <printable> = _Leap($1, $2, 1 ) {right};
<leap>       <count> <printable> = _Leap($1, $3, $2);
<leap> after <count> <printable> = _Leap($1, $3, $2) {right};
<leap>  <_anything> = _Leap($1, $2, 1);
#jump to  <_anything> = _Leap(-, $1, 1);
#jump back to <_anything> = _Leap(+, $1, 1);

#advance  <_anything> = _Leap(d, $1, 1);
#jump to  <_anything> = _Leap(-, $1, 1);
#fallback <_anything> = _Leap(+, $1, 1);
#jump back to <_anything> = _Leap(+, $1, 1);

#crazy replace <_anything> = _Leap(-,$1,1)
# Keys.SendInput({Ctrl+Shift+Right}) $2

#
################## and of copying from above copied from http://vocola.net/unofficial/commands_for_Win32Pad.html

Var = var;
bar = var;

New File = {Ctrl+n};
Open File = {Ctrl+o};
Save File = {Ctrl+s};
Say File = {Ctrl+s};
Close File = {Ctrl+w};

New File = {Ctrl+n};
Open File = {Ctrl+o};

Close File = {Ctrl+w};
Save As = SendSystemKeys({Alt+f})a;
Recent Files = SendSystemKeys({Alt+f});
[Recent] File 1..9 = SendSystemKeys({Alt+f}) $1;


<mathsymbolmin> := plus="+" | minus="-" | times="*" | divided by="/" | 'module oh'="%";
<mathsymbol> := plus=" + " | minus=" - " | times=" * " | divided by=" / " | 'module oh'=" % ";

###math
<n> <mathsymbol> <n> = $1 $2 $3;
<mathsymbol> <n> = $1 $2;
math <n> <mathsymbol> <n> = $1 $2 $3;
<mathsymbol> = $1;
<mathsymbol> equals = "$1{Backspace}= ";
<mathsymbol> equals <n> = "$1{Backspace}= $2";
constant pie = pi;
pie = pi;
null = NULL;
double = double;
boolean = boolean;
integer = integer;
string = string;

### programming
colon equals = " := ";
double equals = " == ";
triple equals = " === ";
does not equal = " != ";
not equal = " != ";
not = "!";
less than = " < ";
is less than = " < ";
less than or equal to = " <= ";
is less than or equal to = " <= ";
greater than = " > ";
is greater than = " > ";
greater than or equal to = " >= ";
is greater than or equal to = " >= ";
percent <characterKey> = "%$1";
minus <characterKey> = "-$1";
slash <characterKey> = "/$1";
backslash <characterKey> = "{\}$1";
plus equals = " += ";
minus equals = " -= ";
dot equals = " .= ";
plus plus = "++";
string of = "str()"{Left};
integer of = "int()"{Left};
len of = "len()"{Left};
boolean or = " || ";
boolean and = " && ";
double & = " && ";
X or = " xor ";

###math
<n> <mathsymbol> <n> = $1 $2 $3;
<mathsymbol> <n> = $1 $2;
math <n> <mathsymbol> <n> = $1 $2 $3;
<mathsymbol> = $1;
<mathsymbol> equals = "$1\= ";
<mathsymbol> equals <n> = "$1{Backspace}= $2";
#<mathsymbol> equals <_anything> = "$1{Backspace}= $2";
math <_anything> <mathsymbol> <_anything> = $1 $2 $3;
	